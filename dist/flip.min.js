(()=>{"use strict";function t(t,e,n){return t.dispatchEvent(new CustomEvent(e,n))}var e;!function(t){t.flipStart="flipstart",t.flipCardStart="flipcardstart",t.flipCardEnd="flipcardend",t.flipEnd="flipend"}(e||(e={}));const n=e;var r;!function(t){t.loop="loop",t.random="random"}(r||(r={}));const i=r,s=function(t={}){const{className:e,slot:n,style:r="",innerHTML:i="<slot></slot>"}=t,s=document.createElement("div");return s.attachShadow({mode:"open"}).innerHTML=`\n    <style>\n      \n  :host {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    pointer-events: none;\n    display: block;\n  }\n\n  slot {\n    display: block;\n  }\n\n      ${r}\n    </style>\n    ${i}\n  `,void 0!==e&&s.classList.add(e),void 0!==n&&s.setAttribute("slot",n),s};var a;!function(t){t.temp="temp"}(a||(a={}));const o=a;var l;!function(t){t.current="current",t.temp="temp"}(l||(l={}));const d=l;var p;!function(t){t.up="up",t.down="down",t.left="left",t.right="right"}(p||(p={}));const c=p,h=function(t,e){const n=/^@/.test(t)?"@-":"-",r=t.replace(/^@/,"").replace(/;?$/,";");return(Array.isArray(e)?e:[e]).map((t=>`${n}${t}-${r}`)).concat(t).join("\n")},u=`\n  :host {\n    --right-x-left: 50%;\n    --right-x-right: 100vw;\n    --left-x-left: -100vw;\n    --left-x-right: 50%;\n\n    ${h("clip-path: polygon(\n      var(--x-left) -100vh,\n      var(--x-right) -100vh,\n      var(--x-right) calc(100% + 100vh),\n      var(--x-left) calc(100% + 100vh)\n    );","webkit")}\n  }\n`,y=`\n  ${h(`@keyframes clip {\n    0% {\n      ${h("clip-path: polygon(\n        var(--start-x-left) -100vh,\n        var(--start-x-right) -100vh,\n        var(--start-x-right) calc(100% + 100vh),\n        var(--start-x-left) calc(100% + 100vh)\n      );","webkit")}\n    }\n    50%, 100% {\n      ${h("clip-path: polygon(\n        var(--end-x-left) -100vh,\n        var(--end-x-right) -100vh,\n        var(--end-x-right) calc(100% + 100vh),\n        var(--end-x-left) calc(100% + 100vh)\n      );","webkit")}\n    }\n  }`,"webkit")}\n\n  :host {\n    --hori-perspective: var(--3d-perspective, 5em);\n    --right-x-left: 50%;\n    --right-x-right: calc(100% + 100vw);\n    --left-x-left: -100vw;\n    --left-x-right: 50%;\n\n    ${h("perspective: var(--hori-perspective);","webkit")}\n    ${h("animation: clip var(--duration) forwards steps(1, end);","webkit")}\n  }\n`,f=`\n  ${h(`@keyframes flip {\n    0% {\n      ${h("transform: rotateY(0);","webkit")}\n    }\n    100% {\n      ${h("transform: rotateY(var(--end-deg));","webkit")}\n    }\n  }`,"webkit")}\n\n  :host {\n    --left-end-deg: -180deg;\n    --right-end-deg: 180deg;\n\n    ${h("transform-style: preserve-3d;","webkit")}\n    ${h("animation: flip var(--duration) forwards linear;","webkit")}\n  }\n`,v=`\n  :host {\n    ${h("backface-visibility: hidden;","webkit")}\n    ${h("transform: rotateY(180deg);","webkit")}\n  }\n`,m=`\n  :host {\n    ${h("backface-visibility: hidden;","webkit")}\n  }\n`,g=function(t){const{duration:e,direction:n,lastCard:r,nextCard:i,tempCard:a}=t,o=e/1e3,l=s({style:u}),d=s({style:y}),p=s({style:f}),h=s({style:v}),g=H.cloneCard(i);switch(n){default:case c.left:l.style.setProperty("--x-left","var(--left-x-left)"),l.style.setProperty("--x-right","var(--left-x-right)"),d.style.setProperty("--start-x-left","var(--right-x-left)"),d.style.setProperty("--start-x-right","var(--right-x-right)"),d.style.setProperty("--end-x-left","var(--left-x-left)"),d.style.setProperty("--end-x-right","var(--left-x-right)"),p.style.setProperty("--end-deg","var(--left-end-deg)");break;case c.right:l.style.setProperty("--x-left","var(--right-x-left)"),l.style.setProperty("--x-right","var(--right-x-right)"),d.style.setProperty("--start-x-left","var(--left-x-left)"),d.style.setProperty("--start-x-right","var(--left-x-right)"),d.style.setProperty("--end-x-left","var(--right-x-left)"),d.style.setProperty("--end-x-right","var(--right-x-right)"),p.style.setProperty("--end-deg","var(--right-end-deg)")}if(d.style.setProperty("--duration",`${o}s`),g.removeAttribute("slot"),h.append(g),p.append(h),d.append(p),r){const t=s({style:m}),e=H.cloneCard(r);e.removeAttribute("slot"),t.append(e),p.append(t),l.append(H.cloneCard(t))}return new Promise((t=>{a.addEventListener("animationend",(()=>{t(void 0)}),{once:!0}),a.append(l),a.append(d)}))},x=`\n  :host {\n    --upper-y-top: -100vh;\n    --upper-y-bottom: 50%;\n    --lower-y-top: 50%;\n    --lower-y-bottom: calc(100% + 100vh);\n\n    ${h("clip-path: polygon(\n      -100vw var(--y-top),\n      calc(100% + 100vw) var(--y-top),\n      calc(100% + 100vw) var(--y-bottom),\n      -100vw var(--y-bottom)\n    );","webkit")}\n  }\n`,b=`\n  ${h(`@keyframes clip {\n    0% {\n      ${h("clip-path: polygon(\n        -100vw var(--start-y-top),\n        calc(100% + 100vw) var(--start-y-top),\n        calc(100% + 100vw) var(--start-y-bottom),\n        -100vw var(--start-y-bottom)\n      );","webkit")}\n    }\n    50%, 100% {\n      ${h("clip-path: polygon(\n        -100vw var(--end-y-top),\n        calc(100% + 100vw) var(--end-y-top),\n        calc(100% + 100vw) var(--end-y-bottom),\n        -100vw var(--end-y-bottom)\n      );","webkit")}\n    }\n  }`,"webkit")}\n\n  :host {\n    --vert-perspective: var(--3d-perspective, 5em);\n    --upper-y-top: -100vh;\n    --upper-y-bottom: 50%;\n    --lower-y-top: 50%;\n    --lower-y-bottom: calc(100% + 100vh);\n\n    ${h("perspective: var(--vert-perspective);","webkit")}\n    ${h("animation: clip var(--duration) forwards steps(1, end);","webkit")}\n  }\n`,w=`\n  ${h(`@keyframes flip {\n    0% {\n      ${h("transform: rotateX(0);","webkit")}\n    }\n    100% {\n      ${h("transform: rotateX(var(--end-deg));","webkit")}\n    }\n  }`,"webkit")}\n\n  :host {\n    --down-end-deg: -180deg;\n    --up-end-deg: 180deg;\n\n    ${h("transform-style: preserve-3d;","webkit")}\n    ${h("animation: flip var(--duration) forwards linear;","webkit")}\n  }\n`,C=`\n  :host {\n    ${h("backface-visibility: hidden;","webkit")}\n    ${h("transform: rotateX(180deg);","webkit")}\n  }\n`,$=`\n  :host {\n    ${h("backface-visibility: hidden;","webkit")}\n  }\n`,k=function(t){const{duration:e,direction:n,lastCard:r,nextCard:i,tempCard:a}=t,o=e/1e3,l=s({style:x}),d=s({style:b}),p=s({style:w}),h=s({style:C}),u=R.cloneCard(i);switch(n){default:case c.down:l.style.setProperty("--y-top","var(--lower-y-top)"),l.style.setProperty("--y-bottom","var(--lower-y-bottom)"),d.style.setProperty("--start-y-top","var(--upper-y-top)"),d.style.setProperty("--start-y-bottom","var(--upper-y-bottom)"),d.style.setProperty("--end-y-top","var(--lower-y-top)"),d.style.setProperty("--end-y-bottom","var(--lower-y-bottom)"),p.style.setProperty("--end-deg","var(--down-end-deg)");break;case c.up:l.style.setProperty("--y-top","var(--upper-y-top)"),l.style.setProperty("--y-bottom","var(--upper-y-bottom)"),d.style.setProperty("--start-y-top","var(--lower-y-top)"),d.style.setProperty("--start-y-bottom","var(--lower-y-bottom)"),d.style.setProperty("--end-y-top","var(--upper-y-top)"),d.style.setProperty("--end-y-bottom","var(--upper-y-bottom)"),p.style.setProperty("--end-deg","var(--up-end-deg)")}if(d.style.setProperty("--duration",`${o}s`),u.removeAttribute("slot"),h.append(u),p.append(h),d.append(p),r){const t=s({style:$}),e=R.cloneCard(r);e.removeAttribute("slot"),t.append(e),p.append(t),l.append(R.cloneCard(t))}return new Promise((t=>{a.addEventListener("animationend",(()=>{t(void 0)}),{once:!0}),a.append(l),a.append(d)}))},I=async function(t){switch(t.direction){default:return k.call(this,{...t,direction:c.down});case c.up:case c.down:return k.call(this,t);case c.right:case c.left:return g.call(this,t)}},E=async function(e){const{nextIndex:r}=e,i=await s({className:o.temp,slot:d.temp}),a=this.querySelector(`.${o.temp}`);a&&a.remove(),this.index=r,this.append(i),t(this,n.flipCardStart,{bubbles:!0,cancelable:!0,composed:!0,detail:{...e,tempCard:i}})&&await I.call(this,{...e,tempCard:i}),t(this,n.flipCardEnd,{bubbles:!0,cancelable:!1,composed:!0,detail:{...e,tempCard:i}}),i.remove()},P=async function(e,r={}){const{card:s,index:a}=this.getCardInfo(e??this.getNextIndex({different:this.cards.length>1}));if(null===s){if(void 0===e)return;throw new ReferenceError("Target card doesn't exist")}const{index:o,card:l}=this,{direct:d=!1,duration:p=this.duration,direction:c=this.direction}=r;if(t(this,n.flipStart,{bubbles:!0,cancelable:!0,composed:!0,detail:{direct:d,duration:p,direction:c,lastIndex:o,lastCard:l,targetIndex:a,targetCard:s}})){if(d)await E.call(this,{direct:d,duration:p,direction:c,lastIndex:o,lastCard:l,nextIndex:a,nextCard:s});else{const{mode:t,cards:e,minFlips:n,maxFlips:r}=this,s=e.length,h=e=>{switch(t){default:case i.loop:return this.getNextIndex();case i.random:if(e<r){let t=this.getNextIndex();for(;s>2&&e<n&&t===a;)t=this.getNextIndex();return t}return a}},u=async(t,e,n=1)=>{const r=h(n),i=this.getCardByIndex(r);await E.call(this,{direct:d,duration:p,direction:c,lastIndex:t,lastCard:e,nextIndex:r,nextCard:i}),r!==a&&await u(r,i,n+1)};await u(o,l)}t(this,n.flipEnd,{bubbles:!0,cancelable:!1,composed:!0,detail:{direct:d,duration:p,direction:c,lastIndex:o,lastCard:l,targetIndex:a,targetCard:s}})}},A=function(t){if(t instanceof HTMLElement){const e=this.getIndexByCard(t);return{index:e,card:e>=0?t:null}}if(null===t)return{index:-1,card:null};const e=this.getCardByIndex(t);return{card:e,index:null===e?-1:t}},F=function(t={}){const{different:e=!0,mode:n=this.mode}=t,{index:r,cards:s}=this,{length:a}=s;switch(n){default:case i.loop:{const t=(r+1)%a;return e&&t===r?null:t}case i.random:switch(a){case 0:return null;case 1:return e?null:this.index;default:{let t=-1;for(;-1===t||e&&t===r;)t=Math.floor(a*Math.random());return t}}}};var T;!function(t){t.index="index",t.value="value",t.mode="mode",t.duration="duration",t.direction="direction",t.minFlips="min-flips",t.maxFlips="max-flips",t.perspective="perspective"}(T||(T={}));const N=T;var S;!function(t){t.perspective="--3d-perspective"}(S||(S={}));const B=S,{isNaN:L}=globalThis,M=document.createElement("template");M.innerHTML=`\n  <style>\n    :host {\n      --3d-perspective: 10rem;\n\n      position: relative;\n      display: inline-block;\n    }\n\n    slot {\n      position: relative;\n      z-index: 0;\n    }\n\n    slot:not([name]) {\n      display: none;\n    }\n  </style>\n  <flip>\n    <slot></slot>\n    <slot name="${d.current}"></slot>\n    <slot name="${d.temp}"></slot>\n  </flip>\n`;class V extends HTMLElement{#mode=i.loop;#duration=400;#direction=c.down;#index=-1;#cards=Array.from(this.children);#minFlips=0;#maxFlips;#perspective="10rem";#rootElement;constructor(){super();const t=this.attachShadow({mode:"open"});t.append(M.content.cloneNode(!0)),this.#rootElement=t.querySelector("flip"),t.querySelector("slot:not([name])").addEventListener("slotchange",(()=>{this.#cards=Array.from(this.querySelectorAll(":scope > :not([slot=temp])"))})),V.observedAttributes.filter((t=>this.hasAttribute(t))).forEach((t=>{this.attributeChangedCallback(t)})),-1===this.index&&(this.index=0)}static get observedAttributes(){return[N.index,N.value,N.mode,N.duration,N.direction,N.minFlips,N.maxFlips,N.perspective]}attributeChangedCallback(t){switch(t){default:break;case N.index:{const t=this.getAttribute(N.index);null!==t&&t.length>0&&(this.index=Number(t));break}case N.value:{const t=this.getAttribute(N.value),e=this.cards.findIndex((e=>V.getCardValue(e)===t));this.index=e;break}case N.mode:this.hasAttribute(N.mode)&&(this.mode=this.getAttribute(N.mode));break;case N.duration:{const t=this.getAttribute(N.duration);null!==t&&t.length>0&&(this.duration=Number(t));break}case N.direction:this.hasAttribute(N.direction)&&(this.direction=this.getAttribute(N.direction));break;case N.minFlips:{const t=this.getAttribute(N.minFlips);null!==t&&t.length>0&&(this.minFlips=Number(t));break}case N.maxFlips:{const t=this.getAttribute(N.maxFlips);null!==t&&t.length>0&&(this.maxFlips=Number(t));break}case N.perspective:this.hasAttribute(N.perspective)&&(this.perspective=this.getAttribute(N.perspective))}}static getCardValue(t){return t?.getAttribute?.(N.value)??null}get cards(){return[...this.#cards]}get mode(){return this.#mode}set mode(t){if(!(t in i))throw new TypeError(`Invalid mode: ${t}`);this.#mode=t}get duration(){return this.#duration}set duration(t){if(L(t))throw new TypeError(`Invalid duration: ${t}`);if(t<0)throw new RangeError(`Duration should be greater than 0: ${t}`);this.#duration=t}get direction(){return this.#direction}set direction(t){if(!(t in c))throw new TypeError(`Invalid direction: ${t}`);this.#direction=t}get minFlips(){return this.#minFlips}set minFlips(t){if(L(t))throw new TypeError(`Invalid min flips: ${t}`);if(parseInt(`${t}`,10)!==t)throw new TypeError(`Min flips should be an integer: ${t}`);if(this.#minFlips=t,this.maxFlips<t)throw new RangeError("Setting min flips that is greater than max flips might cause flipping error")}get maxFlips(){return this.#maxFlips??1/0}set maxFlips(t){if(L(t))throw new TypeError(`Invalid max flips: ${t}`);if(parseInt(`${t}`,10)!==t)throw new TypeError(`Max flips should be an integer: ${t}`);if(this.#maxFlips=t,this.minFlips>t)throw new RangeError("Setting max flips that is less than min flips might cause flipping error")}get perspective(){return this.#perspective}set perspective(t){"string"==typeof t&&(this.#perspective=t,this.#rootElement.style.setProperty(B.perspective,t))}get index(){return this.#index}set index(t){if(L(t))throw new TypeError(`Invalid index: ${t}`);if(parseInt(`${t}`,10)!==t)throw new TypeError(`Index should be an integer: ${t}`);if(void 0===this.cards[t])throw new RangeError(`Card index doesn't exist: ${t}`);this.#index=t,this.querySelectorAll(`[slot="${d.current}"]`).forEach((t=>{t.removeAttribute("slot")})),this.cards[t].setAttribute("slot",d.current)}get value(){return this.getValueByIndex(this.index)}set value(t){const e=this.cards.findIndex((e=>V.getCardValue(e)===t));if(-1===e)throw new ReferenceError(`Value is not in cards: ${t}`);this.index=e}get card(){return this.getCardByIndex(this.index)}set card(t){this.index=null===t?-1:this.cards.indexOf(t)}getCardByIndex(t){return this.cards[t]??null}getCardInfo=A;getValueByIndex(t){return V.getCardValue(this.getCardByIndex(t))}getIndexByCard(t){return this.cards.indexOf(t)}getIndexByValue(t){return this.cards.findIndex((e=>V.getCardValue(e)===t))}getNextIndex=F;getNextCard(...t){const e=this.getNextIndex(...t);return null!==e?this.getCardByIndex(e):null}flip=P;flipToCard(t,e){return this.flip(t,e)}flipToIndex(t,e){return this.flip(this.getCardByIndex(t),e)}flipDirectly(...[t,e]){return this.flip(t,{...e,direct:!0})}flipToCardDirectly(t,e){return this.flipDirectly(t,e)}flipToIndexDirectly(t,e){return this.flipDirectly(this.getCardByIndex(t),e)}flipAnimation=I;static cloneCard(t){const e=t.cloneNode(!0);{const n=Array.from(e.querySelectorAll("canvas"));e instanceof HTMLCanvasElement&&n.push(e),n.length>0&&t.querySelectorAll("canvas").forEach(((t,e)=>{const r=t,i=n[e];i.width=r.width,i.height=r.height,i.getContext("2d")?.drawImage(r,0,0)}))}return e}}var q,D;q=V,D="flip-pack",customElements.get(D)?Promise.reject(new Error(`Already defined <${D}>`)):(customElements.define(D,q),customElements.whenDefined(D));const H=V,R=V})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,