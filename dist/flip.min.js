(()=>{"use strict";function t(t,e,n){return t.dispatchEvent(new CustomEvent(e,n))}var e;!function(t){t.flipStart="flipstart",t.flipCardStart="flipcardstart",t.flipCardEnd="flipcardend",t.flipEnd="flipend"}(e||(e={}));const n=e,r=function(t={}){const{className:e,slot:n,style:r="",attributes:i={},innerHTML:o="<slot></slot>"}=t,a=document.createElement("div");return a.attachShadow({mode:"open"}).innerHTML=`\n    <style>\n      \n  :host {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    /*pointer-events: none;*/\n    display: block;\n  }\n\n  slot {\n    display: block;\n  }\n\n      ${r}\n    </style>\n    ${o}\n  `,void 0!==e&&a.classList.add(e),void 0!==n&&a.setAttribute("slot",n),Object.keys(i).forEach((t=>{a.setAttribute(t,i[t])})),a};var i;!function(t){t.temp="temp"}(i||(i={}));const o=i;var a;!function(t){t.current="current",t.temp="temp"}(a||(a={}));const s=a,l=async function(e){const{nextCardInfo:i}=e,{index:a}=i,l=r({className:o.temp,slot:s.temp}),d=this.querySelector(`.${o.temp}`);d&&d.remove(),this.index=a,this.append(l),t(this,n.flipCardStart,{bubbles:!0,cancelable:!0,composed:!0,detail:{...e,tempCardNode:l}})&&await this.flipAnimation({...e,tempCardNode:l}),t(this,n.flipCardEnd,{bubbles:!0,cancelable:!1,composed:!0,detail:{...e,tempCardNode:l}}),l.remove()},d=async function(e,r){const i=("object"!=typeof e||e instanceof HTMLElement?r:e)??{},{mode:o=this.mode,different:a=this.cardsCatch.length>1,direct:s=this.direct,duration:d=this.duration,direction:c=this.direction}=i,p=e===i||void 0===e?this.getNextCardIndex({different:a,mode:o}):e,h=this.getCardInfo(p),{index:u,node:f}=h;if(null===f)throw new ReferenceError(`Target card doesn't exist: ${p}`);const y=this.getCardInfo(this.index);if(t(this,n.flipStart,{bubbles:!0,cancelable:!0,composed:!0,detail:{mode:o,direct:s,different:a,duration:d,direction:c,lastCardInfo:y,targetCardInfo:h}})){if(s)await l.call(this,{mode:o,direct:s,different:a,duration:d,direction:c,lastCardInfo:y,nextCardInfo:h});else{const{minFlips:t,maxFlips:e}=this,n=async(r=1)=>{const i=r<e?this.getNextCardIndex({mode:o,different:r<t}):u,p=this.getCardInfo(i),h=this.getCardInfo(this.index);await l.call(this,{mode:o,direct:s,different:a,duration:d,direction:c,lastCardInfo:h,nextCardInfo:p}),i!==u&&await n(r+1)};await n()}t(this,n.flipEnd,{bubbles:!0,cancelable:!1,composed:!0,detail:{mode:o,direct:s,different:a,duration:d,direction:c,lastCardInfo:y,targetCardInfo:h}})}};var c;!function(t){t.up="up",t.down="down",t.left="left",t.right="right"}(c||(c={}));const p=c,h=function(t,e){const n=/^@/.test(t)?"@-":"-",r=t.replace(/^@/,"").replace(/;?$/,";");return(Array.isArray(e)?e:[e]).map((t=>`${n}${t}-${r}`)).concat(t).join("\n")},u=function(t){const{duration:e,direction:n,lastCardInfo:i,nextCardInfo:o,tempCardNode:a}=t,{node:s}=i,l=o.node,d=e/1e3,c=r({style:`\n  :host {\n    --right-x-left: 50%;\n    --right-x-right: 100vw;\n    --left-x-left: -100vw;\n    --left-x-right: 50%;\n\n    ${h("clip-path: polygon(\n      var(--x-left) -100vh,\n      var(--x-right) -100vh,\n      var(--x-right) calc(100% + 100vh),\n      var(--x-left) calc(100% + 100vh)\n    );","webkit")}\n  }\n`}),u=r({style:(g=this,`\n  ${h(`@keyframes flip {\n    0% {\n      ${h("transform: perspective(var(--hori-perspective)) rotateY(0);","webkit")}\n    }\n    100% {\n      ${h("transform: perspective(var(--hori-perspective)) rotateY(var(--end-deg));","webkit")}\n    }\n  }`,"webkit")}\n\n  :host {\n    --hori-perspective: ${g.perspective};\n    --right-x-left: 50%;\n    --right-x-right: calc(100% + 100vw);\n    --left-x-left: -100vw;\n    --left-x-right: 50%;\n    --left-end-deg: -180deg;\n    --right-end-deg: 180deg;\n\n    ${h("clip-path: polygon(\n      var(--start-x-left) -100vh,\n      var(--start-x-right) -100vh,\n      var(--start-x-right) calc(100% + 100vh),\n      var(--start-x-left) calc(100% + 100vh)\n    );","webkit")}\n    ${h("animation: flip var(--duration) forwards linear;","webkit")}\n  }\n`)}),f=r({style:`\n  ${h("@keyframes clip-next {\n    0% { opacity: 0 }\n    50%, 100% { opacity: 1 }\n  }","webkit")}\n\n  :host {\n    ${h("transform: rotateY(180deg);","webkit")}\n    ${h("animation: clip-next var(--duration) forwards steps(1, end);","webkit")}\n  }\n`}),y=M.cloneCard(l);var g;switch(n){default:case p.left:c.style.setProperty("--x-left","var(--left-x-left)"),c.style.setProperty("--x-right","var(--left-x-right)"),u.style.setProperty("--start-x-left","var(--right-x-left)"),u.style.setProperty("--start-x-right","var(--right-x-right)"),u.style.setProperty("--end-x-left","var(--left-x-left)"),u.style.setProperty("--end-x-right","var(--left-x-right)"),u.style.setProperty("--end-deg","var(--left-end-deg)");break;case p.right:c.style.setProperty("--x-left","var(--right-x-left)"),c.style.setProperty("--x-right","var(--right-x-right)"),u.style.setProperty("--start-x-left","var(--left-x-left)"),u.style.setProperty("--start-x-right","var(--left-x-right)"),u.style.setProperty("--end-x-left","var(--right-x-left)"),u.style.setProperty("--end-x-right","var(--right-x-right)"),u.style.setProperty("--end-deg","var(--right-end-deg)")}if(u.style.setProperty("--duration",`${d}s`),y.removeAttribute("slot"),f.append(y),u.append(f),s){const t=r({style:`\n  ${h("@keyframes clip-last {\n    0% { opacity: 1 }\n    50%, 100% { opacity: 0 }\n  }","webkit")}\n\n  :host {\n    ${h("animation: clip-last var(--duration) forwards steps(1, end);","webkit")}\n  }\n`}),e=M.cloneCard(s);e.removeAttribute("slot"),t.append(e),u.append(t),c.append(M.cloneCard(t))}return new Promise((t=>{a.addEventListener("animationend",(()=>{t(void 0)}),{once:!0}),a.append(c),a.append(u)}))},f=function(t){const{duration:e,direction:n,lastCardInfo:i,nextCardInfo:o,tempCardNode:a}=t,{node:s}=i,l=o.node,d=e/1e3,c=r({style:`\n  :host {\n    --upper-y-top: -100vh;\n    --upper-y-bottom: 50%;\n    --lower-y-top: 50%;\n    --lower-y-bottom: calc(100% + 100vh);\n\n    ${h("clip-path: polygon(\n      -100vw var(--y-top),\n      calc(100% + 100vw) var(--y-top),\n      calc(100% + 100vw) var(--y-bottom),\n      -100vw var(--y-bottom)\n    );","webkit")}\n  }\n`}),u=r({style:(g=this,`\n  ${h(`@keyframes flip {\n    0% {\n      ${h("transform: perspective(var(--vert-perspective)) rotateX(0);","webkit")}\n    }\n    100% {\n      ${h("transform: perspective(var(--vert-perspective)) rotateX(var(--end-deg));","webkit")}\n    }\n  }`,"webkit")}\n\n  :host {\n    --vert-perspective: ${g.perspective};\n    --upper-y-top: -100vh;\n    --upper-y-bottom: 50%;\n    --lower-y-top: 50%;\n    --lower-y-bottom: calc(100% + 100vh);\n    --down-end-deg: -180deg;\n    --up-end-deg: 180deg;\n\n    ${h("clip-path: polygon(\n      -100vw var(--start-y-top),\n      calc(100% + 100vw) var(--start-y-top),\n      calc(100% + 100vw) var(--start-y-bottom),\n      -100vw var(--start-y-bottom)\n    );","webkit")}\n    ${h("animation: flip var(--duration) forwards linear;","webkit")}\n  }\n`)}),f=r({style:`\n  ${h("@keyframes clip-next {\n    0% { opacity: 0 }\n    50%, 100% { opacity: 1 }\n  }","webkit")}\n\n  :host {\n    ${h("transform: rotateX(180deg);","webkit")}\n    ${h("animation: clip-next var(--duration) forwards steps(1, end);","webkit")}\n  }\n`}),y=M.cloneCard(l);var g;switch(n){default:case p.down:c.style.setProperty("--y-top","var(--lower-y-top)"),c.style.setProperty("--y-bottom","var(--lower-y-bottom)"),u.style.setProperty("--start-y-top","var(--upper-y-top)"),u.style.setProperty("--start-y-bottom","var(--upper-y-bottom)"),u.style.setProperty("--end-y-top","var(--lower-y-top)"),u.style.setProperty("--end-y-bottom","var(--lower-y-bottom)"),u.style.setProperty("--end-deg","var(--down-end-deg)");break;case p.up:c.style.setProperty("--y-top","var(--upper-y-top)"),c.style.setProperty("--y-bottom","var(--upper-y-bottom)"),u.style.setProperty("--start-y-top","var(--lower-y-top)"),u.style.setProperty("--start-y-bottom","var(--lower-y-bottom)"),u.style.setProperty("--end-y-top","var(--upper-y-top)"),u.style.setProperty("--end-y-bottom","var(--upper-y-bottom)"),u.style.setProperty("--end-deg","var(--up-end-deg)")}if(u.style.setProperty("--duration",`${d}s`),y.removeAttribute("slot"),f.append(y),u.append(f),s){const t=r({style:`\n  ${h("@keyframes clip-last {\n    0% { opacity: 1 }\n    50%, 100% { opacity: 0 }\n  }","webkit")}\n\n  :host {\n    ${h("animation: clip-last var(--duration) forwards steps(1, end);","webkit")}\n  }\n`}),e=M.cloneCard(s);e.removeAttribute("slot"),t.append(e),u.append(t),c.append(M.cloneCard(t))}return new Promise((t=>{a.addEventListener("animationend",(()=>{t(void 0)}),{once:!0}),a.append(c),a.append(u)}))},y=async function(t){const{direction:e}=t;switch(e){default:throw new TypeError(`Invalid direction: ${e}`);case p.up:case p.down:return f.call(this,t);case p.right:case p.left:return u.call(this,t)}},g=function(t){if(null===t)return-1;const{cardsCatch:e}=this;return t instanceof HTMLElement?e.indexOf(t):e.findIndex((e=>M.getCardValue(e)===t))},v=function(t){if(null===t)return{node:null,index:-1,value:null};if(t instanceof HTMLElement){const e=this.getCardIndex(t),n=-1===e?null:t;return{node:n,index:e,value:M.getCardValue(n)}}if("string"==typeof t){const e=this.getCardIndex(t),n=-1===e?null:this.getCardNode(e);return{node:n,index:e,value:M.getCardValue(n)}}const e=this.getCardNode(t);return{node:e,index:null===e?-1:t,value:M.getCardValue(e)}},m=function(t){return null===t?null:"string"==typeof t?this.cardsCatch.find((e=>M.getCardValue(e)===t))??null:this.cardsCatch[t]??null},x=function(t){return null===t?null:t instanceof HTMLElement?M.getCardValue(t):M.getCardValue(this.cardsCatch[t])};var w;!function(t){t.loop="loop",t.random="random"}(w||(w={}));const b=w,C=function(t={}){const{different:e=this.cardsCatch.length>1,mode:n=this.mode}=t,{index:r,cardsCatch:i}=this,{length:o}=i;switch(n){default:throw new TypeError(`Invalid mode: ${n}`);case b.loop:{const t=(r+1)%o;return t===r&&e?-1:t}case b.random:switch(o){case 0:return-1;case 1:return e?-1:this.index;default:{let t=-1;for(;-1===t||t===r&&e;)t=Math.floor(o*Math.random());return t}}}},$=function(t){const e=t.cloneNode(!0);{const n=Array.from(e.querySelectorAll("canvas"));e instanceof HTMLCanvasElement&&n.push(e),n.length>0&&t.querySelectorAll("canvas").forEach(((t,e)=>{const r=t,i=n[e];i.width=r.width,i.height=r.height,i.getContext("2d")?.drawImage(r,0,0)}))}return e};var I;!function(t){t.index="index",t.value="value",t.mode="mode",t.direct="direct",t.duration="duration",t.direction="direction",t.minFlips="min-flips",t.maxFlips="max-flips",t.perspective="perspective"}(I||(I={}));const E=I,{isNaN:A}=globalThis,k=document.createElement("template"),P={[E.mode]:b.loop,[E.direct]:!1,[E.duration]:400,[E.direction]:p.down,[E.index]:-1,[E.minFlips]:0,[E.maxFlips]:1/0};k.innerHTML=`\n  <style>\n    :host {\n      position: relative;\n      display: inline-block;\n    }\n\n    slot {\n      position: relative;\n      z-index: 0;\n    }\n\n    slot:not([name]) {\n      display: none;\n    }\n  </style>\n  <flip>\n    <slot></slot>\n    <slot name="${s.current}"></slot>\n    <slot name="${s.temp}"></slot>\n  </flip>\n`;class N extends HTMLElement{cardsCatch=[];constructor(){super();const t=this.attachShadow({mode:"open"});t.append(k.content.cloneNode(!0)),this.rootElement=t.querySelector("flip"),t.querySelector("slot:not([name])").addEventListener("slotchange",(()=>{this.cardsCatch=Array.from(this.querySelectorAll(":scope > :not([slot=temp])"));const{index:t,cardsCatch:e}=this;(-1===t||t>=e.length)&&(this.index=e.length>0?0:-1)}))}static get DIRECTION(){return{...p}}static get MODE(){return{...b}}static get EVENT(){return{...n}}static cloneCard=$;static getCardValue(t){return t?.getAttribute?.(E.value)??null}get cards(){return[...this.cardsCatch]}get mode(){const t=this.getAttribute(E.mode);return null!==t&&Object.values(b).includes(t)?t:P[E.mode]}set mode(t){if(!Object.values(b).includes(t))throw new TypeError(`Invalid mode: ${t}`);this.setAttribute(E.mode,t)}get direct(){return null!==this.getAttribute(E.direct)}set direct(t){t?this.setAttribute(E.direct,""):this.removeAttribute(E.direct)}get duration(){const t=this.getAttribute(E.duration);return null===t||0===t.length?P[E.duration]:Number(t)}set duration(t){if(A(t))throw new TypeError(`Invalid duration: ${t}`);if(t<0)throw new RangeError(`Duration should not be lesser than 0: ${t}`);this.setAttribute(E.duration,`${t}`)}get direction(){const t=this.getAttribute(E.direction);return Object.values(p).includes(t)?t:P[E.direction]}set direction(t){if(!Object.values(p).includes(t))throw new TypeError(`Invalid direction: ${t}`);this.setAttribute(E.direction,t)}get minFlips(){const t=this.getAttribute(E.minFlips);return null===t||0===t.length?P[E.minFlips]:Number(t)}set minFlips(t){if(A(t))throw new TypeError(`Invalid min flips: ${t}`);if(parseInt(`${t}`,10)!==t)throw new TypeError(`Min flips should be an integer: ${t}`);if(t<0)throw new RangeError(`Min flips should not be lesser than 0: ${t}`);if(this.setAttribute(E.minFlips,`${t}`),this.maxFlips<t)throw new RangeError("Setting min flips that is greater than max flips might cause flipping error")}get maxFlips(){const t=this.getAttribute(E.maxFlips);return null===t||0===t.length?P[E.maxFlips]:Number(t)}set maxFlips(t){if(A(t))throw new TypeError(`Invalid max flips: ${t}`);if(parseInt(`${t}`,10)!==t)throw new TypeError(`Max flips should be an integer: ${t}`);if(t<0)throw new RangeError(`Max flips should not be lesser than 0: ${t}`);if(this.setAttribute(E.maxFlips,`${t}`),this.minFlips>t)throw new RangeError("Setting max flips that is less than min flips might cause flipping error")}get perspective(){const t=this.getAttribute(E.perspective);if(null!==t)return t;const{clientWidth:e,clientHeight:n}=this;return 2*Math.max(e,n)+"px"}set perspective(t){"string"==typeof t&&t.length>0&&this.setAttribute(E.perspective,t)}get index(){const t=this.getAttribute(E.index);return null===t||0===t.length?P[E.index]:Number(t)%this.cards.length}set index(t){if(A(t))throw new TypeError(`Invalid index: ${t}`);if(parseInt(`${t}`,10)!==t)throw new TypeError(`Index should be an integer: ${t}`);const{cardsCatch:e}=this,n=this.getCardInfo(t),{index:r,value:i,node:o}=n;if(null===o&&e.length>0)throw new Error(`Illegal index: ${t}`);r!==this.index&&(this.querySelectorAll(`[slot="${s.current}"]`).forEach((t=>{t.removeAttribute("slot")})),o?.setAttribute?.("slot",s.current),this.setAttribute(E.index,`${r}`),i?this.setAttribute(E.value,i):this.removeAttribute(E.value))}get value(){return this.getCardValue(this.index)}set value(t){if(null!==t&&"string"!=typeof t)throw new TypeError(`Invalid value: ${t}`);this.index=this.getCardIndex(t)}get card(){return this.getCardNode(this.index)}set card(t){this.index=this.getCardIndex(t)}getCardNode=m;getCardIndex=g;getCardValue=x;getCardInfo=v;getNextCardIndex=C;getNextCardNode(...t){const e=this.getNextCardIndex(...t);return this.getCardNode(e)}getNextCardValue(...t){const e=this.getNextCardIndex(...t);return this.getCardValue(e)}getNextCardInfo(...t){const e=this.getNextCardIndex(...t);return this.getCardInfo(e)}flip(...t){return d.call(this,...t)}flipAnimation=y}var T,F;T=N,F="flip-pack",customElements.get(F)?Promise.reject(new Error(`Already defined <${F}>`)):(customElements.define(F,T),customElements.whenDefined(F));const M=N})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEtBQUttQixvQkFBb0J5RyxHQUUzQyxPQUFPNUgsS0FBSzBILGFBQWE5SCxHQU0zQmtJLG1CQUFtQkYsR0FDakIsTUFBTWhJLEVBQVlJLEtBQUttQixvQkFBb0J5RyxHQUUzQyxPQUFPNUgsS0FBS3FCLFlBQVl6QixHQWExQndELFFBQVF3RSxHQUNOLE9BQU94RSxFQUFBQSxLQUFVcEQsUUFBUzRILEdBTTVCcEgsY0FBZ0JBLEVDOWJsQixJQUNFdUgsRUFDQUMsRUFEQUQsRURnY2N2RSxFQy9iZHdFLEVEVWUsWUNSWEMsZUFBZUMsSUFBSUYsR0FDZG5FLFFBQVFzRSxPQUNiLElBQUlWLE1BQU8sb0JBQW1CTyxRQUlsQ0MsZUFBZUcsT0FBT0osRUFBVUQsR0FFekJFLGVBQWVJLFlBQVlMLElEdWJwQyxXIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGxmMmNvbS9mbGlwLmpzLy4vc3JjL3V0aWxzL2V2ZW50SGFuZGxlci50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2ZsaXAuanMvLi9zcmMvdmFsdWVzL2V2ZW50LnRzIiwid2VicGFjazovL0BsZjJjb20vZmxpcC5qcy8uL3NyYy91dGlscy9jcmVhdGVUZW1wTm9kZS50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2ZsaXAuanMvLi9zcmMvdmFsdWVzL2NsYXNzTmFtZS50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2ZsaXAuanMvLi9zcmMvdmFsdWVzL3Nsb3QudHMiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9mbGlwLmpzLy4vc3JjL21ldGhvZHMvZmxpcC9mbGlwT25lQ2FyZC50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2ZsaXAuanMvLi9zcmMvbWV0aG9kcy9mbGlwL2luZGV4LnRzIiwid2VicGFjazovL0BsZjJjb20vZmxpcC5qcy8uL3NyYy92YWx1ZXMvZGlyZWN0aW9uLnRzIiwid2VicGFjazovL0BsZjJjb20vZmxpcC5qcy8uL3NyYy91dGlscy9wcmVmaXhDc3MudHMiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9mbGlwLmpzLy4vc3JjL21ldGhvZHMvZmxpcC9ob3Jpem9udGFsLnRzIiwid2VicGFjazovL0BsZjJjb20vZmxpcC5qcy8uL3NyYy9tZXRob2RzL2ZsaXAvdmVydGljYWwudHMiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9mbGlwLmpzLy4vc3JjL21ldGhvZHMvZmxpcC9mbGlwQW5pbWF0aW9uLnRzIiwid2VicGFjazovL0BsZjJjb20vZmxpcC5qcy8uL3NyYy9tZXRob2RzL2dldENhcmRJbmRleC50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2ZsaXAuanMvLi9zcmMvbWV0aG9kcy9nZXRDYXJkSW5mby50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2ZsaXAuanMvLi9zcmMvbWV0aG9kcy9nZXRDYXJkTm9kZS50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2ZsaXAuanMvLi9zcmMvbWV0aG9kcy9nZXRDYXJkVmFsdWUudHMiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9mbGlwLmpzLy4vc3JjL3ZhbHVlcy9tb2RlLnRzIiwid2VicGFjazovL0BsZjJjb20vZmxpcC5qcy8uL3NyYy9tZXRob2RzL2dldE5leHRDYXJkSW5kZXgudHMiLCJ3ZWJwYWNrOi8vQGxmMmNvbS9mbGlwLmpzLy4vc3JjL3V0aWxzL2Nsb25lQ2FyZC50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2ZsaXAuanMvLi9zcmMvdmFsdWVzL2F0dHJpYnV0ZS50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2ZsaXAuanMvLi9zcmMvZmxpcC50cyIsIndlYnBhY2s6Ly9AbGYyY29tL2ZsaXAuanMvLi9zcmMvdXRpbHMvcmVnaXN0ZXJFbGVtZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbInR5cGUgRXZlbnRIb2xkZXIgPSBIVE1MRWxlbWVudCB8IERvY3VtZW50IHwgV2luZG93O1xudHlwZSBFdmVudExpc3RlbmVyID0gKC4uLmFyZ3M6IGFueVtdKSA9PiB2b2lkO1xuXG5pbnRlcmZhY2UgRXZlbnRMaXN0ZW5lck9wdGlvbnMge1xuICBjYXB0dXJlPzogYm9vbGVhbjtcbiAgb25jZT86IGJvb2xlYW47XG4gIHBhc3NpdmU/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIEFkZHMgZXZlbnQgb2YgdHlwZSB0byBlbGVtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihcbiAgcmVmOiBFdmVudEhvbGRlcixcbiAgdHlwZTogc3RyaW5nLFxuICBsaXN0ZW5lcjogRXZlbnRMaXN0ZW5lcixcbiAgb3B0aW9ucz86IEV2ZW50TGlzdGVuZXJPcHRpb25zLFxuKTogdm9pZCB7XG4gIHJlZi5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBBZGRzIGV2ZW50cyBvZiB0eXBlcyB0byBlbGVtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcnMoXG4gIHJlZjogRXZlbnRIb2xkZXIsXG4gIHR5cGVzOiBzdHJpbmdbXSxcbiAgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXIsXG4gIG9wdGlvbnM/OiBFdmVudExpc3RlbmVyT3B0aW9ucyxcbik6IHZvaWQge1xuICB0eXBlcy5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgYWRkRXZlbnRMaXN0ZW5lcihyZWYsIHR5cGUsIGxpc3RlbmVyLCBvcHRpb25zKTtcbiAgfSk7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBldmVudCBvZiB0eXBlIGZyb20gZWxlbWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gIHJlZjogRXZlbnRIb2xkZXIsXG4gIHR5cGU6IHN0cmluZyxcbiAgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXIsXG4gIG9wdGlvbnM/OiBFdmVudExpc3RlbmVyT3B0aW9ucyxcbik6IHZvaWQge1xuICByZWYucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogUmVtb3ZlcyBldmVudHMgb2YgdHlwZXMgZnJvbSBlbGVtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoXG4gIHJlZjogRXZlbnRIb2xkZXIsXG4gIHR5cGVzOiBzdHJpbmdbXSxcbiAgbGlzdGVuZXI6IEV2ZW50TGlzdGVuZXIsXG4gIG9wdGlvbnM/OiBFdmVudExpc3RlbmVyT3B0aW9ucyxcbik6IHZvaWQge1xuICB0eXBlcy5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgcmVmLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgbGlzdGVuZXIsIG9wdGlvbnMpO1xuICB9KTtcbn1cblxuaW50ZXJmYWNlIEN1c3RvbUV2ZW50SW5pdDxUPiB7XG4gIGRldGFpbD86IFQ7XG4gIGJ1YmJsZXM/OiBib29sZWFuO1xuICBjYW5jZWxhYmxlPzogYm9vbGVhbjtcbiAgY29tcG9zZWQ/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIFRyaWdnZXJzIGV2ZW50IGFuZCByZXR1cm5zIGZhbHNlIGlmIHRoZSBldmVudCBpcyBjYW5jZWxsZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmlnZ2VyRXZlbnQ8VD4oXG4gIHJlZjogRXZlbnRIb2xkZXIsXG4gIHR5cGU6IHN0cmluZyxcbiAgb3B0aW9ucz86IEN1c3RvbUV2ZW50SW5pdDxUPixcbik6IGJvb2xlYW4ge1xuICByZXR1cm4gcmVmLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KHR5cGUsIG9wdGlvbnMpKTtcbn1cblxuLyoqXG4gKiBUcmlnZ2VycyBldmVudHMgYW5kIHJldHVybnMgZmFsc2UgaWYgYW55IG9mIHRoZSBldmVudCBpc1xuICogY2FuY2VsbGVkLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdHJpZ2dlckV2ZW50czxUPihcbiAgcmVmOiBFdmVudEhvbGRlcixcbiAgdHlwZXM6IHN0cmluZ1tdLFxuICBvcHRpb25zPzogQ3VzdG9tRXZlbnRJbml0PFQ+LFxuKTogYm9vbGVhbiB7XG4gIHJldHVybiB0eXBlcy5ldmVyeSgodHlwZSkgPT4gdHJpZ2dlckV2ZW50KHJlZiwgdHlwZSwgb3B0aW9ucykpO1xufVxuIiwiZW51bSBFdmVudCB7XG4gIGZsaXBTdGFydCA9ICdmbGlwc3RhcnQnLFxuICBmbGlwQ2FyZFN0YXJ0ID0gJ2ZsaXBjYXJkc3RhcnQnLFxuICBmbGlwQ2FyZEVuZCA9ICdmbGlwY2FyZGVuZCcsXG4gIGZsaXBFbmQgPSAnZmxpcGVuZCcsXG59XG5cbmV4cG9ydCBkZWZhdWx0IEV2ZW50O1xuIiwiY29uc3QgdGVtcENhcmRDc3MgPSBgXG4gIDpob3N0IHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAwO1xuICAgIHJpZ2h0OiAwO1xuICAgIGJvdHRvbTogMDtcbiAgICBsZWZ0OiAwO1xuICAgIC8qcG9pbnRlci1ldmVudHM6IG5vbmU7Ki9cbiAgICBkaXNwbGF5OiBibG9jaztcbiAgfVxuXG4gIHNsb3Qge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICB9XG5gO1xuXG5pbnRlcmZhY2UgVGVtcE5vZGVPcHRpb25zIHtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xuICBzbG90Pzogc3RyaW5nO1xuICBzdHlsZT86IHN0cmluZztcbiAgYXR0cmlidXRlcz86IFJlY29yZDxzdHJpbmcsIHN0cmluZz47XG4gIGlubmVySFRNTD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgdGVtcCBub2RlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVUZW1wTm9kZShcbiAgb3B0aW9uczogVGVtcE5vZGVPcHRpb25zID0ge30sXG4pOiBIVE1MRWxlbWVudCB7XG4gIGNvbnN0IHtcbiAgICBjbGFzc05hbWUsXG4gICAgc2xvdCxcbiAgICBzdHlsZSA9ICcnLFxuICAgIGF0dHJpYnV0ZXMgPSB7fSxcbiAgICBpbm5lckhUTUwgPSAnPHNsb3Q+PC9zbG90PicsXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCB0ZW1wTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICBjb25zdCBzaGFkb3dSb290ID0gdGVtcE5vZGUuYXR0YWNoU2hhZG93KHsgbW9kZTogJ29wZW4nIH0pO1xuXG4gIHNoYWRvd1Jvb3QuaW5uZXJIVE1MID0gYFxuICAgIDxzdHlsZT5cbiAgICAgICR7dGVtcENhcmRDc3N9XG4gICAgICAke3N0eWxlfVxuICAgIDwvc3R5bGU+XG4gICAgJHtpbm5lckhUTUx9XG4gIGA7XG5cbiAgaWYgKGNsYXNzTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdGVtcE5vZGUuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICB9XG4gIGlmIChzbG90ICE9PSB1bmRlZmluZWQpIHtcbiAgICB0ZW1wTm9kZS5zZXRBdHRyaWJ1dGUoJ3Nsb3QnLCBzbG90KTtcbiAgfVxuXG4gIE9iamVjdC5rZXlzKGF0dHJpYnV0ZXMpLmZvckVhY2goKGtleSkgPT4ge1xuICAgIHRlbXBOb2RlLnNldEF0dHJpYnV0ZShrZXksIGF0dHJpYnV0ZXNba2V5XSk7XG4gIH0pO1xuXG4gIHJldHVybiB0ZW1wTm9kZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlVGVtcE5vZGU7XG4iLCJlbnVtIENsYXNzTmFtZSB7XG4gIHRlbXAgPSAndGVtcCcsXG59XG5cbmV4cG9ydCBkZWZhdWx0IENsYXNzTmFtZTtcbiIsImVudW0gU2xvdCB7XG4gIGN1cnJlbnQgPSAnY3VycmVudCcsXG4gIHRlbXAgPSAndGVtcCcsXG59XG5cbmV4cG9ydCBkZWZhdWx0IFNsb3Q7XG4iLCJpbXBvcnQgeyBGbGlwT3B0aW9ucyB9IGZyb20gJy4nO1xuaW1wb3J0IEZsaXAgZnJvbSAnLi4vLi4vZmxpcCc7XG5pbXBvcnQgY3JlYXRlVGVtcE5vZGUgZnJvbSAnLi4vLi4vdXRpbHMvY3JlYXRlVGVtcE5vZGUnO1xuaW1wb3J0IHsgdHJpZ2dlckV2ZW50IH0gZnJvbSAnLi4vLi4vdXRpbHMvZXZlbnRIYW5kbGVyJztcbmltcG9ydCBDbGFzc05hbWUgZnJvbSAnLi4vLi4vdmFsdWVzL2NsYXNzTmFtZSc7XG5pbXBvcnQgRXZlbnQgZnJvbSAnLi4vLi4vdmFsdWVzL2V2ZW50JztcbmltcG9ydCBTbG90IGZyb20gJy4uLy4uL3ZhbHVlcy9zbG90JztcbmltcG9ydCB7IENhcmRJbmZvIH0gZnJvbSAnLi4vZ2V0Q2FyZEluZm8nO1xuaW1wb3J0IHsgRmxpcEFuaW1hdGlvbk9wdGlvbiB9IGZyb20gJy4vZmxpcEFuaW1hdGlvbic7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmxpcE9uZUNhcmRPcHRpb25zIGV4dGVuZHMgUmVxdWlyZWQ8RmxpcE9wdGlvbnM+IHtcbiAgbGFzdENhcmRJbmZvOiBDYXJkSW5mbztcbiAgbmV4dENhcmRJbmZvOiBDYXJkSW5mbztcbn1cblxuLyoqXG4gKiBGbGlwcyBjYXJkIG9uY2UuXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGZsaXBPbmVDYXJkKFxuICB0aGlzOiBGbGlwLFxuICBvcHRpb25zOiBGbGlwT25lQ2FyZE9wdGlvbnMsXG4pOiBQcm9taXNlPHZvaWQ+IHtcbiAgY29uc3QgeyBuZXh0Q2FyZEluZm8gfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHtcbiAgICBpbmRleDogbmV4dEluZGV4LFxuICB9ID0gbmV4dENhcmRJbmZvO1xuICBjb25zdCB0ZW1wQ2FyZE5vZGUgPSBjcmVhdGVUZW1wTm9kZSh7XG4gICAgY2xhc3NOYW1lOiBDbGFzc05hbWUudGVtcCxcbiAgICBzbG90OiBTbG90LnRlbXAsXG4gIH0pO1xuICBjb25zdCBsYXN0VGVtcENhcmQgPSB0aGlzLnF1ZXJ5U2VsZWN0b3IoYC4ke0NsYXNzTmFtZS50ZW1wfWApO1xuXG4gIGlmIChsYXN0VGVtcENhcmQpIHtcbiAgICBsYXN0VGVtcENhcmQucmVtb3ZlKCk7XG4gIH1cblxuICB0aGlzLmluZGV4ID0gbmV4dEluZGV4O1xuICB0aGlzLmFwcGVuZCh0ZW1wQ2FyZE5vZGUpO1xuXG4gIGNvbnN0IHBhc3NGbGlwQ2FyZFN0YXJ0RXZlbnQgPSB0cmlnZ2VyRXZlbnQ8RmxpcEFuaW1hdGlvbk9wdGlvbj4oXG4gICAgdGhpcyxcbiAgICBFdmVudC5mbGlwQ2FyZFN0YXJ0LFxuICAgIHtcbiAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICBjYW5jZWxhYmxlOiB0cnVlLFxuICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICBkZXRhaWw6IHtcbiAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgdGVtcENhcmROb2RlLFxuICAgICAgfSxcbiAgICB9LFxuICApO1xuXG4gIGlmIChwYXNzRmxpcENhcmRTdGFydEV2ZW50KSB7XG4gICAgYXdhaXQgdGhpcy5mbGlwQW5pbWF0aW9uKHtcbiAgICAgIC4uLm9wdGlvbnMsXG4gICAgICB0ZW1wQ2FyZE5vZGUsXG4gICAgfSk7XG4gIH1cblxuICB0cmlnZ2VyRXZlbnQ8RmxpcEFuaW1hdGlvbk9wdGlvbj4oXG4gICAgdGhpcyxcbiAgICBFdmVudC5mbGlwQ2FyZEVuZCxcbiAgICB7XG4gICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgY2FuY2VsYWJsZTogZmFsc2UsXG4gICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgIGRldGFpbDoge1xuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICB0ZW1wQ2FyZE5vZGUsXG4gICAgICB9LFxuICAgIH0sXG4gICk7XG4gIHRlbXBDYXJkTm9kZS5yZW1vdmUoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZmxpcE9uZUNhcmQ7XG4iLCJpbXBvcnQgRmxpcCBmcm9tICcuLi8uLi9mbGlwJztcbmltcG9ydCB7IHRyaWdnZXJFdmVudCB9IGZyb20gJy4uLy4uL3V0aWxzL2V2ZW50SGFuZGxlcic7XG5pbXBvcnQgRGlyZWN0aW9uIGZyb20gJy4uLy4uL3ZhbHVlcy9kaXJlY3Rpb24nO1xuaW1wb3J0IEV2ZW50IGZyb20gJy4uLy4uL3ZhbHVlcy9ldmVudCc7XG5pbXBvcnQgeyBDYXJkSW5mbyB9IGZyb20gJy4uL2dldENhcmRJbmZvJztcbmltcG9ydCB7IEdldE5leHRDYXJkT3B0aW9ucyB9IGZyb20gJy4uL2dldE5leHRDYXJkSW5kZXgnO1xuaW1wb3J0IGZsaXBPbmVDYXJkIGZyb20gJy4vZmxpcE9uZUNhcmQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZsaXBPcHRpb25zIGV4dGVuZHMgR2V0TmV4dENhcmRPcHRpb25zIHtcbiAgZGlyZWN0PzogYm9vbGVhbjtcbiAgZGlyZWN0aW9uPzogRGlyZWN0aW9uO1xuICBkdXJhdGlvbj86IG51bWJlcjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGbGlwRGV0YWlsIGV4dGVuZHMgUmVxdWlyZWQ8RmxpcE9wdGlvbnM+IHtcbiAgbGFzdENhcmRJbmZvOiBDYXJkSW5mbztcbiAgdGFyZ2V0Q2FyZEluZm86IENhcmRJbmZvO1xufVxuXG50eXBlIEZsaXBTb3VyY2UgPSBudW1iZXIgfCBzdHJpbmcgfCBIVE1MRWxlbWVudCB8IG51bGw7XG5cbi8qKlxuICogRmxpcHMgdG8gc3BlY2lmaWMgY2FyZC9pbmRleC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmxpcDxcbiAgQTAgZXh0ZW5kcyBGbGlwU291cmNlIHwgRmxpcE9wdGlvbnMsXG4gIEExIGV4dGVuZHMgQTAgZXh0ZW5kcyBGbGlwT3B0aW9ucyA/IG5ldmVyIDogRmxpcE9wdGlvbnMsXG4+KFxuICB0aGlzOiBGbGlwLFxuICBhcmcwPzogQTAsXG4gIGFyZzE/OiBBMSxcbik6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCBvcHRpb25zOiBGbGlwT3B0aW9ucyA9ICh0eXBlb2YgYXJnMCA9PT0gJ29iamVjdCcgJiYgIShhcmcwIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpXG4gICAgPyBhcmcwXG4gICAgOiBhcmcxXG4gICkgPz8ge307XG4gIGNvbnN0IHtcbiAgICBtb2RlID0gdGhpcy5tb2RlLFxuICAgIGRpZmZlcmVudCA9IHRoaXMuY2FyZHNDYXRjaC5sZW5ndGggPiAxLFxuICAgIGRpcmVjdCA9IHRoaXMuZGlyZWN0LFxuICAgIGR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbixcbiAgICBkaXJlY3Rpb24gPSB0aGlzLmRpcmVjdGlvbixcbiAgfSA9IG9wdGlvbnM7XG4gIGNvbnN0IHRhcmdldFNvdXJjZSA9IChhcmcwID09PSBvcHRpb25zIHx8IGFyZzAgPT09IHVuZGVmaW5lZFxuICAgID8gdGhpcy5nZXROZXh0Q2FyZEluZGV4KHsgZGlmZmVyZW50LCBtb2RlIH0pXG4gICAgOiBhcmcwXG4gICkgYXMgbnVtYmVyO1xuICBjb25zdCB0YXJnZXRDYXJkSW5mbyA9IHRoaXMuZ2V0Q2FyZEluZm8odGFyZ2V0U291cmNlKTtcbiAgY29uc3Qge1xuICAgIGluZGV4OiB0YXJnZXRJbmRleCxcbiAgICBub2RlOiB0YXJnZXROb2RlLFxuICB9ID0gdGFyZ2V0Q2FyZEluZm87XG5cbiAgaWYgKHRhcmdldE5vZGUgPT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoYFRhcmdldCBjYXJkIGRvZXNuJ3QgZXhpc3Q6ICR7dGFyZ2V0U291cmNlfWApO1xuICB9XG5cbiAgY29uc3QgbGFzdENhcmRJbmZvID0gdGhpcy5nZXRDYXJkSW5mbyh0aGlzLmluZGV4KTtcbiAgY29uc3QgcGFzc1N0YXJ0RXZlbnQgPSB0cmlnZ2VyRXZlbnQ8RmxpcERldGFpbD4oXG4gICAgdGhpcyxcbiAgICBFdmVudC5mbGlwU3RhcnQsXG4gICAge1xuICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgIGRldGFpbDoge1xuICAgICAgICBtb2RlLFxuICAgICAgICBkaXJlY3QsXG4gICAgICAgIGRpZmZlcmVudCxcbiAgICAgICAgZHVyYXRpb24sXG4gICAgICAgIGRpcmVjdGlvbixcbiAgICAgICAgbGFzdENhcmRJbmZvLFxuICAgICAgICB0YXJnZXRDYXJkSW5mbyxcbiAgICAgIH0sXG4gICAgfSxcbiAgKTtcblxuICBpZiAoIXBhc3NTdGFydEV2ZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgaWYgKGRpcmVjdCkge1xuICAgIGF3YWl0IGZsaXBPbmVDYXJkLmNhbGwodGhpcywge1xuICAgICAgbW9kZSxcbiAgICAgIGRpcmVjdCxcbiAgICAgIGRpZmZlcmVudCxcbiAgICAgIGR1cmF0aW9uLFxuICAgICAgZGlyZWN0aW9uLFxuICAgICAgbGFzdENhcmRJbmZvLFxuICAgICAgbmV4dENhcmRJbmZvOiB0YXJnZXRDYXJkSW5mbyxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCB7XG4gICAgICBtaW5GbGlwcyxcbiAgICAgIG1heEZsaXBzLFxuICAgIH0gPSB0aGlzO1xuICAgIGNvbnN0IGZsaXBOZXh0ID0gYXN5bmMgKHRpbWVzID0gMSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgY29uc3QgbmV4dEluZGV4ID0gKHRpbWVzIDwgbWF4RmxpcHNcbiAgICAgICAgPyAoXG4gICAgICAgICAgdGhpcy5nZXROZXh0Q2FyZEluZGV4KHtcbiAgICAgICAgICAgIG1vZGUsXG4gICAgICAgICAgICBkaWZmZXJlbnQ6IHRpbWVzIDwgbWluRmxpcHMsXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgICA6IHRhcmdldEluZGV4XG4gICAgICApO1xuICAgICAgY29uc3QgbmV4dENhcmRJbmZvID0gdGhpcy5nZXRDYXJkSW5mbyhuZXh0SW5kZXgpO1xuICAgICAgY29uc3QgY3VycmVudENhcmRJbmZvID0gdGhpcy5nZXRDYXJkSW5mbyh0aGlzLmluZGV4KTtcblxuICAgICAgYXdhaXQgZmxpcE9uZUNhcmQuY2FsbCh0aGlzLCB7XG4gICAgICAgIG1vZGUsXG4gICAgICAgIGRpcmVjdCxcbiAgICAgICAgZGlmZmVyZW50LFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgZGlyZWN0aW9uLFxuICAgICAgICBsYXN0Q2FyZEluZm86IGN1cnJlbnRDYXJkSW5mbyxcbiAgICAgICAgbmV4dENhcmRJbmZvLFxuICAgICAgfSk7XG5cbiAgICAgIGlmIChuZXh0SW5kZXggIT09IHRhcmdldEluZGV4KSB7XG4gICAgICAgIGF3YWl0IGZsaXBOZXh0KHRpbWVzICsgMSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGF3YWl0IGZsaXBOZXh0KCk7XG4gIH1cblxuICB0cmlnZ2VyRXZlbnQ8RmxpcERldGFpbD4oXG4gICAgdGhpcyxcbiAgICBFdmVudC5mbGlwRW5kLFxuICAgIHtcbiAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICBjYW5jZWxhYmxlOiBmYWxzZSxcbiAgICAgIGNvbXBvc2VkOiB0cnVlLFxuICAgICAgZGV0YWlsOiB7XG4gICAgICAgIG1vZGUsXG4gICAgICAgIGRpcmVjdCxcbiAgICAgICAgZGlmZmVyZW50LFxuICAgICAgICBkdXJhdGlvbixcbiAgICAgICAgZGlyZWN0aW9uLFxuICAgICAgICBsYXN0Q2FyZEluZm8sXG4gICAgICAgIHRhcmdldENhcmRJbmZvLFxuICAgICAgfSxcbiAgICB9LFxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmbGlwO1xuIiwiZW51bSBEaXJlY3Rpb24ge1xuICB1cCA9ICd1cCcsXG4gIGRvd24gPSAnZG93bicsXG4gIGxlZnQgPSAnbGVmdCcsXG4gIHJpZ2h0ID0gJ3JpZ2h0Jyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgRGlyZWN0aW9uO1xuIiwidHlwZSBQcmVmaXggPSAnd2Via2l0JyB8ICdvJyB8ICdtcycgfCAnbW96JztcblxuLyoqXG4gKiBSZXR1cm5zIHByZWZpeGVkIENTUyB0ZXh0LlxuICovXG5mdW5jdGlvbiBwcmVmaXhDc3MoY3NzOiBzdHJpbmcsIHByZWZpeHM6IFByZWZpeCB8IFByZWZpeFtdKTogc3RyaW5nIHtcbiAgY29uc3QgaGVhZCA9IC9eQC8udGVzdChjc3MpID8gJ0AtJyA6ICctJztcbiAgY29uc3QgdGV4dCA9IGNzc1xuICAgIC5yZXBsYWNlKC9eQC8sICcnKVxuICAgIC5yZXBsYWNlKC87PyQvLCAnOycpO1xuXG4gIHJldHVybiAoQXJyYXkuaXNBcnJheShwcmVmaXhzKSA/IHByZWZpeHMgOiBbcHJlZml4c10pXG4gICAgLm1hcCgocHJlZml4KSA9PiBgJHtoZWFkfSR7cHJlZml4fS0ke3RleHR9YClcbiAgICAuY29uY2F0KGNzcylcbiAgICAuam9pbignXFxuJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHByZWZpeENzcztcbiIsImltcG9ydCBGbGlwIGZyb20gJy4uLy4uL2ZsaXAnO1xuaW1wb3J0IGNyZWF0ZVRlbXBOb2RlIGZyb20gJy4uLy4uL3V0aWxzL2NyZWF0ZVRlbXBOb2RlJztcbmltcG9ydCBwcmVmaXhDc3MgZnJvbSAnLi4vLi4vdXRpbHMvcHJlZml4Q3NzJztcbmltcG9ydCBEaXJlY3Rpb24gZnJvbSAnLi4vLi4vdmFsdWVzL2RpcmVjdGlvbic7XG5pbXBvcnQgeyBGbGlwQW5pbWF0aW9uT3B0aW9uIH0gZnJvbSAnLi9mbGlwQW5pbWF0aW9uJztcblxudHlwZSBTdHlsZUdldHRlciA9IChmbGlwOiBGbGlwKSA9PiBzdHJpbmc7XG5cbmNvbnN0IGdldEJhY2tncm91bmRTdHlsZTogU3R5bGVHZXR0ZXIgPSAoKSA9PiAoYFxuICA6aG9zdCB7XG4gICAgLS1yaWdodC14LWxlZnQ6IDUwJTtcbiAgICAtLXJpZ2h0LXgtcmlnaHQ6IDEwMHZ3O1xuICAgIC0tbGVmdC14LWxlZnQ6IC0xMDB2dztcbiAgICAtLWxlZnQteC1yaWdodDogNTAlO1xuXG4gICAgJHtwcmVmaXhDc3MoYGNsaXAtcGF0aDogcG9seWdvbihcbiAgICAgIHZhcigtLXgtbGVmdCkgLTEwMHZoLFxuICAgICAgdmFyKC0teC1yaWdodCkgLTEwMHZoLFxuICAgICAgdmFyKC0teC1yaWdodCkgY2FsYygxMDAlICsgMTAwdmgpLFxuICAgICAgdmFyKC0teC1sZWZ0KSBjYWxjKDEwMCUgKyAxMDB2aClcbiAgICApO2AsICd3ZWJraXQnKX1cbiAgfVxuYCk7XG5cbmNvbnN0IGdldENhcmRTdHlsZTogU3R5bGVHZXR0ZXIgPSAoZmxpcCkgPT4gKGBcbiAgJHtwcmVmaXhDc3MoYEBrZXlmcmFtZXMgZmxpcCB7XG4gICAgMCUge1xuICAgICAgJHtwcmVmaXhDc3MoJ3RyYW5zZm9ybTogcGVyc3BlY3RpdmUodmFyKC0taG9yaS1wZXJzcGVjdGl2ZSkpIHJvdGF0ZVkoMCk7JywgJ3dlYmtpdCcpfVxuICAgIH1cbiAgICAxMDAlIHtcbiAgICAgICR7cHJlZml4Q3NzKCd0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKHZhcigtLWhvcmktcGVyc3BlY3RpdmUpKSByb3RhdGVZKHZhcigtLWVuZC1kZWcpKTsnLCAnd2Via2l0Jyl9XG4gICAgfVxuICB9YCwgJ3dlYmtpdCcpfVxuXG4gIDpob3N0IHtcbiAgICAtLWhvcmktcGVyc3BlY3RpdmU6ICR7ZmxpcC5wZXJzcGVjdGl2ZX07XG4gICAgLS1yaWdodC14LWxlZnQ6IDUwJTtcbiAgICAtLXJpZ2h0LXgtcmlnaHQ6IGNhbGMoMTAwJSArIDEwMHZ3KTtcbiAgICAtLWxlZnQteC1sZWZ0OiAtMTAwdnc7XG4gICAgLS1sZWZ0LXgtcmlnaHQ6IDUwJTtcbiAgICAtLWxlZnQtZW5kLWRlZzogLTE4MGRlZztcbiAgICAtLXJpZ2h0LWVuZC1kZWc6IDE4MGRlZztcblxuICAgICR7cHJlZml4Q3NzKGBjbGlwLXBhdGg6IHBvbHlnb24oXG4gICAgICB2YXIoLS1zdGFydC14LWxlZnQpIC0xMDB2aCxcbiAgICAgIHZhcigtLXN0YXJ0LXgtcmlnaHQpIC0xMDB2aCxcbiAgICAgIHZhcigtLXN0YXJ0LXgtcmlnaHQpIGNhbGMoMTAwJSArIDEwMHZoKSxcbiAgICAgIHZhcigtLXN0YXJ0LXgtbGVmdCkgY2FsYygxMDAlICsgMTAwdmgpXG4gICAgKTtgLCAnd2Via2l0Jyl9XG4gICAgJHtwcmVmaXhDc3MoJ2FuaW1hdGlvbjogZmxpcCB2YXIoLS1kdXJhdGlvbikgZm9yd2FyZHMgbGluZWFyOycsICd3ZWJraXQnKX1cbiAgfVxuYCk7XG5cbmNvbnN0IGdldE5leHRDYXJkU3R5bGU6IFN0eWxlR2V0dGVyID0gKCkgPT4gKGBcbiAgJHtwcmVmaXhDc3MoYEBrZXlmcmFtZXMgY2xpcC1uZXh0IHtcbiAgICAwJSB7IG9wYWNpdHk6IDAgfVxuICAgIDUwJSwgMTAwJSB7IG9wYWNpdHk6IDEgfVxuICB9YCwgJ3dlYmtpdCcpfVxuXG4gIDpob3N0IHtcbiAgICAke3ByZWZpeENzcygndHJhbnNmb3JtOiByb3RhdGVZKDE4MGRlZyk7JywgJ3dlYmtpdCcpfVxuICAgICR7cHJlZml4Q3NzKCdhbmltYXRpb246IGNsaXAtbmV4dCB2YXIoLS1kdXJhdGlvbikgZm9yd2FyZHMgc3RlcHMoMSwgZW5kKTsnLCAnd2Via2l0Jyl9XG4gIH1cbmApO1xuXG5jb25zdCBnZXRMYXN0Q2FyZFN0eWxlOiBTdHlsZUdldHRlciA9ICgpID0+IChgXG4gICR7cHJlZml4Q3NzKGBAa2V5ZnJhbWVzIGNsaXAtbGFzdCB7XG4gICAgMCUgeyBvcGFjaXR5OiAxIH1cbiAgICA1MCUsIDEwMCUgeyBvcGFjaXR5OiAwIH1cbiAgfWAsICd3ZWJraXQnKX1cblxuICA6aG9zdCB7XG4gICAgJHtwcmVmaXhDc3MoJ2FuaW1hdGlvbjogY2xpcC1sYXN0IHZhcigtLWR1cmF0aW9uKSBmb3J3YXJkcyBzdGVwcygxLCBlbmQpOycsICd3ZWJraXQnKX1cbiAgfVxuYCk7XG5cbi8qKlxuICogRmxpcHMgY2FyZCBob3Jpem9udGFsbHkuXG4gKi9cbmZ1bmN0aW9uIGZsaXBwaW5nSG9yaXpvbnRhbGx5KFxuICB0aGlzOiBGbGlwLFxuICBvcHRpb25zOiBGbGlwQW5pbWF0aW9uT3B0aW9uLFxuKTogUHJvbWlzZTx2b2lkPiB7XG4gIGNvbnN0IHtcbiAgICBkdXJhdGlvbixcbiAgICBkaXJlY3Rpb24sXG4gICAgbGFzdENhcmRJbmZvLFxuICAgIG5leHRDYXJkSW5mbyxcbiAgICB0ZW1wQ2FyZE5vZGUsXG4gIH0gPSBvcHRpb25zO1xuICBjb25zdCB7XG4gICAgbm9kZTogbGFzdENhcmROb2RlLFxuICB9ID0gbGFzdENhcmRJbmZvO1xuICBjb25zdCBuZXh0Q2FyZE5vZGUgPSBuZXh0Q2FyZEluZm8ubm9kZSBhcyBIVE1MRWxlbWVudDtcbiAgY29uc3QgZHVyYXRpb25TZWMgPSBkdXJhdGlvbiAvIDEwMDA7XG4gIGNvbnN0IGRvbUJhY2tncm91bmQgPSBjcmVhdGVUZW1wTm9kZSh7IHN0eWxlOiBnZXRCYWNrZ3JvdW5kU3R5bGUodGhpcykgfSk7XG4gIGNvbnN0IGRvbUNhcmQgPSBjcmVhdGVUZW1wTm9kZSh7IHN0eWxlOiBnZXRDYXJkU3R5bGUodGhpcykgfSk7XG4gIGNvbnN0IGRvbU5leHQgPSBjcmVhdGVUZW1wTm9kZSh7IHN0eWxlOiBnZXROZXh0Q2FyZFN0eWxlKHRoaXMpIH0pO1xuICBjb25zdCBkb21OZXh0Q2FyZCA9IEZsaXAuY2xvbmVDYXJkKG5leHRDYXJkTm9kZSk7XG5cbiAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICBkZWZhdWx0OlxuICAgIGNhc2UgRGlyZWN0aW9uLmxlZnQ6XG4gICAgICBkb21CYWNrZ3JvdW5kLnN0eWxlLnNldFByb3BlcnR5KCctLXgtbGVmdCcsICd2YXIoLS1sZWZ0LXgtbGVmdCknKTtcbiAgICAgIGRvbUJhY2tncm91bmQuc3R5bGUuc2V0UHJvcGVydHkoJy0teC1yaWdodCcsICd2YXIoLS1sZWZ0LXgtcmlnaHQpJyk7XG4gICAgICBkb21DYXJkLnN0eWxlLnNldFByb3BlcnR5KCctLXN0YXJ0LXgtbGVmdCcsICd2YXIoLS1yaWdodC14LWxlZnQpJyk7XG4gICAgICBkb21DYXJkLnN0eWxlLnNldFByb3BlcnR5KCctLXN0YXJ0LXgtcmlnaHQnLCAndmFyKC0tcmlnaHQteC1yaWdodCknKTtcbiAgICAgIGRvbUNhcmQuc3R5bGUuc2V0UHJvcGVydHkoJy0tZW5kLXgtbGVmdCcsICd2YXIoLS1sZWZ0LXgtbGVmdCknKTtcbiAgICAgIGRvbUNhcmQuc3R5bGUuc2V0UHJvcGVydHkoJy0tZW5kLXgtcmlnaHQnLCAndmFyKC0tbGVmdC14LXJpZ2h0KScpO1xuICAgICAgZG9tQ2FyZC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1lbmQtZGVnJywgJ3ZhcigtLWxlZnQtZW5kLWRlZyknKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSBEaXJlY3Rpb24ucmlnaHQ6XG4gICAgICBkb21CYWNrZ3JvdW5kLnN0eWxlLnNldFByb3BlcnR5KCctLXgtbGVmdCcsICd2YXIoLS1yaWdodC14LWxlZnQpJyk7XG4gICAgICBkb21CYWNrZ3JvdW5kLnN0eWxlLnNldFByb3BlcnR5KCctLXgtcmlnaHQnLCAndmFyKC0tcmlnaHQteC1yaWdodCknKTtcbiAgICAgIGRvbUNhcmQuc3R5bGUuc2V0UHJvcGVydHkoJy0tc3RhcnQteC1sZWZ0JywgJ3ZhcigtLWxlZnQteC1sZWZ0KScpO1xuICAgICAgZG9tQ2FyZC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1zdGFydC14LXJpZ2h0JywgJ3ZhcigtLWxlZnQteC1yaWdodCknKTtcbiAgICAgIGRvbUNhcmQuc3R5bGUuc2V0UHJvcGVydHkoJy0tZW5kLXgtbGVmdCcsICd2YXIoLS1yaWdodC14LWxlZnQpJyk7XG4gICAgICBkb21DYXJkLnN0eWxlLnNldFByb3BlcnR5KCctLWVuZC14LXJpZ2h0JywgJ3ZhcigtLXJpZ2h0LXgtcmlnaHQpJyk7XG4gICAgICBkb21DYXJkLnN0eWxlLnNldFByb3BlcnR5KCctLWVuZC1kZWcnLCAndmFyKC0tcmlnaHQtZW5kLWRlZyknKTtcbiAgICAgIGJyZWFrO1xuICB9XG5cbiAgZG9tQ2FyZC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1kdXJhdGlvbicsIGAke2R1cmF0aW9uU2VjfXNgKTtcbiAgZG9tTmV4dENhcmQucmVtb3ZlQXR0cmlidXRlKCdzbG90Jyk7XG4gIGRvbU5leHQuYXBwZW5kKGRvbU5leHRDYXJkKTtcbiAgZG9tQ2FyZC5hcHBlbmQoZG9tTmV4dCk7XG5cbiAgaWYgKGxhc3RDYXJkTm9kZSkge1xuICAgIGNvbnN0IGRvbUxhc3QgPSBjcmVhdGVUZW1wTm9kZSh7IHN0eWxlOiBnZXRMYXN0Q2FyZFN0eWxlKHRoaXMpIH0pO1xuICAgIGNvbnN0IGRvbUxhc3RDYXJkID0gRmxpcC5jbG9uZUNhcmQobGFzdENhcmROb2RlKTtcblxuICAgIGRvbUxhc3RDYXJkLnJlbW92ZUF0dHJpYnV0ZSgnc2xvdCcpO1xuICAgIGRvbUxhc3QuYXBwZW5kKGRvbUxhc3RDYXJkKTtcbiAgICBkb21DYXJkLmFwcGVuZChkb21MYXN0KTtcbiAgICBkb21CYWNrZ3JvdW5kLmFwcGVuZChGbGlwLmNsb25lQ2FyZChkb21MYXN0KSk7XG4gIH1cblxuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICB0ZW1wQ2FyZE5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICdhbmltYXRpb25lbmQnLFxuICAgICAgKCkgPT4ge1xuICAgICAgICByZXNvbHZlKHVuZGVmaW5lZCk7XG4gICAgICB9LFxuICAgICAgeyBvbmNlOiB0cnVlIH0sXG4gICAgKTtcbiAgICB0ZW1wQ2FyZE5vZGUuYXBwZW5kKGRvbUJhY2tncm91bmQpO1xuICAgIHRlbXBDYXJkTm9kZS5hcHBlbmQoZG9tQ2FyZCk7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmbGlwcGluZ0hvcml6b250YWxseTtcbiIsImltcG9ydCBGbGlwIGZyb20gJy4uLy4uL2ZsaXAnO1xuaW1wb3J0IHByZWZpeENzcyBmcm9tICcuLi8uLi91dGlscy9wcmVmaXhDc3MnO1xuaW1wb3J0IERpcmVjdGlvbiBmcm9tICcuLi8uLi92YWx1ZXMvZGlyZWN0aW9uJztcbmltcG9ydCBjcmVhdGVUZW1wTm9kZSBmcm9tICcuLi8uLi91dGlscy9jcmVhdGVUZW1wTm9kZSc7XG5pbXBvcnQgeyBGbGlwQW5pbWF0aW9uT3B0aW9uIH0gZnJvbSAnLi9mbGlwQW5pbWF0aW9uJztcblxudHlwZSBTdHlsZUdldHRlciA9IChmbGlwOiBGbGlwKSA9PiBzdHJpbmc7XG5cbmNvbnN0IGdldEJhY2tncm91bmRTdHlsZTogU3R5bGVHZXR0ZXIgPSAoKSA9PiAoYFxuICA6aG9zdCB7XG4gICAgLS11cHBlci15LXRvcDogLTEwMHZoO1xuICAgIC0tdXBwZXIteS1ib3R0b206IDUwJTtcbiAgICAtLWxvd2VyLXktdG9wOiA1MCU7XG4gICAgLS1sb3dlci15LWJvdHRvbTogY2FsYygxMDAlICsgMTAwdmgpO1xuXG4gICAgJHtwcmVmaXhDc3MoYGNsaXAtcGF0aDogcG9seWdvbihcbiAgICAgIC0xMDB2dyB2YXIoLS15LXRvcCksXG4gICAgICBjYWxjKDEwMCUgKyAxMDB2dykgdmFyKC0teS10b3ApLFxuICAgICAgY2FsYygxMDAlICsgMTAwdncpIHZhcigtLXktYm90dG9tKSxcbiAgICAgIC0xMDB2dyB2YXIoLS15LWJvdHRvbSlcbiAgICApO2AsICd3ZWJraXQnKX1cbiAgfVxuYCk7XG5cbmNvbnN0IGdldENhcmRTdHlsZTogU3R5bGVHZXR0ZXIgPSAoZmxpcCkgPT4gKGBcbiAgJHtwcmVmaXhDc3MoYEBrZXlmcmFtZXMgZmxpcCB7XG4gICAgMCUge1xuICAgICAgJHtwcmVmaXhDc3MoJ3RyYW5zZm9ybTogcGVyc3BlY3RpdmUodmFyKC0tdmVydC1wZXJzcGVjdGl2ZSkpIHJvdGF0ZVgoMCk7JywgJ3dlYmtpdCcpfVxuICAgIH1cbiAgICAxMDAlIHtcbiAgICAgICR7cHJlZml4Q3NzKCd0cmFuc2Zvcm06IHBlcnNwZWN0aXZlKHZhcigtLXZlcnQtcGVyc3BlY3RpdmUpKSByb3RhdGVYKHZhcigtLWVuZC1kZWcpKTsnLCAnd2Via2l0Jyl9XG4gICAgfVxuICB9YCwgJ3dlYmtpdCcpfVxuXG4gIDpob3N0IHtcbiAgICAtLXZlcnQtcGVyc3BlY3RpdmU6ICR7ZmxpcC5wZXJzcGVjdGl2ZX07XG4gICAgLS11cHBlci15LXRvcDogLTEwMHZoO1xuICAgIC0tdXBwZXIteS1ib3R0b206IDUwJTtcbiAgICAtLWxvd2VyLXktdG9wOiA1MCU7XG4gICAgLS1sb3dlci15LWJvdHRvbTogY2FsYygxMDAlICsgMTAwdmgpO1xuICAgIC0tZG93bi1lbmQtZGVnOiAtMTgwZGVnO1xuICAgIC0tdXAtZW5kLWRlZzogMTgwZGVnO1xuXG4gICAgJHtwcmVmaXhDc3MoYGNsaXAtcGF0aDogcG9seWdvbihcbiAgICAgIC0xMDB2dyB2YXIoLS1zdGFydC15LXRvcCksXG4gICAgICBjYWxjKDEwMCUgKyAxMDB2dykgdmFyKC0tc3RhcnQteS10b3ApLFxuICAgICAgY2FsYygxMDAlICsgMTAwdncpIHZhcigtLXN0YXJ0LXktYm90dG9tKSxcbiAgICAgIC0xMDB2dyB2YXIoLS1zdGFydC15LWJvdHRvbSlcbiAgICApO2AsICd3ZWJraXQnKX1cbiAgICAke3ByZWZpeENzcygnYW5pbWF0aW9uOiBmbGlwIHZhcigtLWR1cmF0aW9uKSBmb3J3YXJkcyBsaW5lYXI7JywgJ3dlYmtpdCcpfVxuICB9XG5gKTtcblxuY29uc3QgZ2V0TmV4dENhcmRTdHlsZTogU3R5bGVHZXR0ZXIgPSAoKSA9PiAoYFxuICAke3ByZWZpeENzcyhgQGtleWZyYW1lcyBjbGlwLW5leHQge1xuICAgIDAlIHsgb3BhY2l0eTogMCB9XG4gICAgNTAlLCAxMDAlIHsgb3BhY2l0eTogMSB9XG4gIH1gLCAnd2Via2l0Jyl9XG5cbiAgOmhvc3Qge1xuICAgICR7cHJlZml4Q3NzKCd0cmFuc2Zvcm06IHJvdGF0ZVgoMTgwZGVnKTsnLCAnd2Via2l0Jyl9XG4gICAgJHtwcmVmaXhDc3MoJ2FuaW1hdGlvbjogY2xpcC1uZXh0IHZhcigtLWR1cmF0aW9uKSBmb3J3YXJkcyBzdGVwcygxLCBlbmQpOycsICd3ZWJraXQnKX1cbiAgfVxuYCk7XG5cbmNvbnN0IGdldExhc3RDYXJkU3R5bGU6IFN0eWxlR2V0dGVyID0gKCkgPT4gKGBcbiAgJHtwcmVmaXhDc3MoYEBrZXlmcmFtZXMgY2xpcC1sYXN0IHtcbiAgICAwJSB7IG9wYWNpdHk6IDEgfVxuICAgIDUwJSwgMTAwJSB7IG9wYWNpdHk6IDAgfVxuICB9YCwgJ3dlYmtpdCcpfVxuXG4gIDpob3N0IHtcbiAgICAke3ByZWZpeENzcygnYW5pbWF0aW9uOiBjbGlwLWxhc3QgdmFyKC0tZHVyYXRpb24pIGZvcndhcmRzIHN0ZXBzKDEsIGVuZCk7JywgJ3dlYmtpdCcpfVxuICB9XG5gKTtcblxuLyoqXG4gKiBGbGlwcyBjYXJkIHZlcnRpY2FsbHkuXG4gKi9cbmZ1bmN0aW9uIGZsaXBwaW5nVmVydGljYWxseShcbiAgdGhpczogRmxpcCxcbiAgb3B0aW9uczogRmxpcEFuaW1hdGlvbk9wdGlvbixcbik6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCB7XG4gICAgZHVyYXRpb24sXG4gICAgZGlyZWN0aW9uLFxuICAgIGxhc3RDYXJkSW5mbyxcbiAgICBuZXh0Q2FyZEluZm8sXG4gICAgdGVtcENhcmROb2RlLFxuICB9ID0gb3B0aW9ucztcbiAgY29uc3Qge1xuICAgIG5vZGU6IGxhc3RDYXJkTm9kZSxcbiAgfSA9IGxhc3RDYXJkSW5mbztcbiAgY29uc3QgbmV4dENhcmROb2RlID0gbmV4dENhcmRJbmZvLm5vZGUgYXMgSFRNTEVsZW1lbnQ7XG4gIGNvbnN0IGR1cmF0aW9uU2VjID0gZHVyYXRpb24gLyAxMDAwO1xuICBjb25zdCBkb21CYWNrZ3JvdW5kID0gY3JlYXRlVGVtcE5vZGUoeyBzdHlsZTogZ2V0QmFja2dyb3VuZFN0eWxlKHRoaXMpIH0pO1xuICBjb25zdCBkb21DYXJkID0gY3JlYXRlVGVtcE5vZGUoeyBzdHlsZTogZ2V0Q2FyZFN0eWxlKHRoaXMpIH0pO1xuICBjb25zdCBkb21OZXh0ID0gY3JlYXRlVGVtcE5vZGUoeyBzdHlsZTogZ2V0TmV4dENhcmRTdHlsZSh0aGlzKSB9KTtcbiAgY29uc3QgZG9tTmV4dENhcmQgPSBGbGlwLmNsb25lQ2FyZChuZXh0Q2FyZE5vZGUpO1xuXG4gIHN3aXRjaCAoZGlyZWN0aW9uKSB7XG4gICAgZGVmYXVsdDpcbiAgICBjYXNlIERpcmVjdGlvbi5kb3duOlxuICAgICAgZG9tQmFja2dyb3VuZC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS15LXRvcCcsICd2YXIoLS1sb3dlci15LXRvcCknKTtcbiAgICAgIGRvbUJhY2tncm91bmQuc3R5bGUuc2V0UHJvcGVydHkoJy0teS1ib3R0b20nLCAndmFyKC0tbG93ZXIteS1ib3R0b20pJyk7XG4gICAgICBkb21DYXJkLnN0eWxlLnNldFByb3BlcnR5KCctLXN0YXJ0LXktdG9wJywgJ3ZhcigtLXVwcGVyLXktdG9wKScpO1xuICAgICAgZG9tQ2FyZC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1zdGFydC15LWJvdHRvbScsICd2YXIoLS11cHBlci15LWJvdHRvbSknKTtcbiAgICAgIGRvbUNhcmQuc3R5bGUuc2V0UHJvcGVydHkoJy0tZW5kLXktdG9wJywgJ3ZhcigtLWxvd2VyLXktdG9wKScpO1xuICAgICAgZG9tQ2FyZC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1lbmQteS1ib3R0b20nLCAndmFyKC0tbG93ZXIteS1ib3R0b20pJyk7XG4gICAgICBkb21DYXJkLnN0eWxlLnNldFByb3BlcnR5KCctLWVuZC1kZWcnLCAndmFyKC0tZG93bi1lbmQtZGVnKScpO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlIERpcmVjdGlvbi51cDpcbiAgICAgIGRvbUJhY2tncm91bmQuc3R5bGUuc2V0UHJvcGVydHkoJy0teS10b3AnLCAndmFyKC0tdXBwZXIteS10b3ApJyk7XG4gICAgICBkb21CYWNrZ3JvdW5kLnN0eWxlLnNldFByb3BlcnR5KCctLXktYm90dG9tJywgJ3ZhcigtLXVwcGVyLXktYm90dG9tKScpO1xuICAgICAgZG9tQ2FyZC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1zdGFydC15LXRvcCcsICd2YXIoLS1sb3dlci15LXRvcCknKTtcbiAgICAgIGRvbUNhcmQuc3R5bGUuc2V0UHJvcGVydHkoJy0tc3RhcnQteS1ib3R0b20nLCAndmFyKC0tbG93ZXIteS1ib3R0b20pJyk7XG4gICAgICBkb21DYXJkLnN0eWxlLnNldFByb3BlcnR5KCctLWVuZC15LXRvcCcsICd2YXIoLS11cHBlci15LXRvcCknKTtcbiAgICAgIGRvbUNhcmQuc3R5bGUuc2V0UHJvcGVydHkoJy0tZW5kLXktYm90dG9tJywgJ3ZhcigtLXVwcGVyLXktYm90dG9tKScpO1xuICAgICAgZG9tQ2FyZC5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1lbmQtZGVnJywgJ3ZhcigtLXVwLWVuZC1kZWcpJyk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIGRvbUNhcmQuc3R5bGUuc2V0UHJvcGVydHkoJy0tZHVyYXRpb24nLCBgJHtkdXJhdGlvblNlY31zYCk7XG4gIGRvbU5leHRDYXJkLnJlbW92ZUF0dHJpYnV0ZSgnc2xvdCcpO1xuICBkb21OZXh0LmFwcGVuZChkb21OZXh0Q2FyZCk7XG4gIGRvbUNhcmQuYXBwZW5kKGRvbU5leHQpO1xuXG4gIGlmIChsYXN0Q2FyZE5vZGUpIHtcbiAgICBjb25zdCBkb21MYXN0ID0gY3JlYXRlVGVtcE5vZGUoeyBzdHlsZTogZ2V0TGFzdENhcmRTdHlsZSh0aGlzKSB9KTtcbiAgICBjb25zdCBkb21MYXN0Q2FyZCA9IEZsaXAuY2xvbmVDYXJkKGxhc3RDYXJkTm9kZSk7XG5cbiAgICBkb21MYXN0Q2FyZC5yZW1vdmVBdHRyaWJ1dGUoJ3Nsb3QnKTtcbiAgICBkb21MYXN0LmFwcGVuZChkb21MYXN0Q2FyZCk7XG4gICAgZG9tQ2FyZC5hcHBlbmQoZG9tTGFzdCk7XG4gICAgZG9tQmFja2dyb3VuZC5hcHBlbmQoRmxpcC5jbG9uZUNhcmQoZG9tTGFzdCkpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgdGVtcENhcmROb2RlLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAnYW5pbWF0aW9uZW5kJyxcbiAgICAgICgpID0+IHtcbiAgICAgICAgcmVzb2x2ZSh1bmRlZmluZWQpO1xuICAgICAgfSxcbiAgICAgIHsgb25jZTogdHJ1ZSB9LFxuICAgICk7XG4gICAgdGVtcENhcmROb2RlLmFwcGVuZChkb21CYWNrZ3JvdW5kKTtcbiAgICB0ZW1wQ2FyZE5vZGUuYXBwZW5kKGRvbUNhcmQpO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZmxpcHBpbmdWZXJ0aWNhbGx5O1xuIiwiaW1wb3J0IEZsaXAgZnJvbSAnLi4vLi4vZmxpcCc7XG5pbXBvcnQgRGlyZWN0aW9uIGZyb20gJy4uLy4uL3ZhbHVlcy9kaXJlY3Rpb24nO1xuaW1wb3J0IHsgRmxpcE9uZUNhcmRPcHRpb25zIH0gZnJvbSAnLi9mbGlwT25lQ2FyZCc7XG5pbXBvcnQgZmxpcHBpbmdIb3Jpem9udGFsbHkgZnJvbSAnLi9ob3Jpem9udGFsJztcbmltcG9ydCBmbGlwcGluZ1ZlcnRpY2FsbHkgZnJvbSAnLi92ZXJ0aWNhbCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmxpcEFuaW1hdGlvbk9wdGlvbiBleHRlbmRzIFJlcXVpcmVkPEZsaXBPbmVDYXJkT3B0aW9ucz4ge1xuICB0ZW1wQ2FyZE5vZGU6IEhUTUxFbGVtZW50O1xufVxuXG4vKipcbiAqIERvZXMgZmxpcHBpbmcgYW5pbWF0aW9uIGZyb20gbGFzdCBjYXJkIHRvIG5leHQgY2FyZC5cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZmxpcEFuaW1hdGlvbihcbiAgdGhpczogRmxpcCxcbiAgb3B0aW9uczogRmxpcEFuaW1hdGlvbk9wdGlvbixcbik6IFByb21pc2U8dm9pZD4ge1xuICBjb25zdCB7IGRpcmVjdGlvbiB9ID0gb3B0aW9ucztcblxuICBzd2l0Y2ggKGRpcmVjdGlvbikge1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIGRpcmVjdGlvbjogJHtkaXJlY3Rpb259YCk7XG5cbiAgICBjYXNlIERpcmVjdGlvbi51cDpcbiAgICBjYXNlIERpcmVjdGlvbi5kb3duOlxuICAgICAgcmV0dXJuIGZsaXBwaW5nVmVydGljYWxseS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgY2FzZSBEaXJlY3Rpb24ucmlnaHQ6XG4gICAgY2FzZSBEaXJlY3Rpb24ubGVmdDpcbiAgICAgIHJldHVybiBmbGlwcGluZ0hvcml6b250YWxseS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZsaXBBbmltYXRpb247XG4iLCJpbXBvcnQgRmxpcCBmcm9tICcuLi9mbGlwJztcblxuLyoqXG4gKiBSZXR1cm5zIGNhcmQgaW5kZXggYnkgcmVmZXJlbmNlLlxuICovXG5mdW5jdGlvbiBnZXRDYXJkSW5kZXgoXG4gIHRoaXM6IEZsaXAsXG4gIHNvdXJjZTogc3RyaW5nIHwgSFRNTEVsZW1lbnQgfCBudWxsLFxuKTogbnVtYmVyIHtcbiAgLy8gbnVsbFxuICBpZiAoc291cmNlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIC0xO1xuICB9XG5cbiAgY29uc3QgeyBjYXJkc0NhdGNoIH0gPSB0aGlzO1xuXG4gIC8vIGNhcmQgbm9kZVxuICBpZiAoc291cmNlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gY2FyZHNDYXRjaC5pbmRleE9mKHNvdXJjZSk7XG4gIH1cblxuICAvLyB2YWx1ZVxuICByZXR1cm4gY2FyZHNDYXRjaC5maW5kSW5kZXgoKGNhcmQpID0+IChcbiAgICBGbGlwLmdldENhcmRWYWx1ZShjYXJkKSA9PT0gc291cmNlXG4gICkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRDYXJkSW5kZXg7XG4iLCJpbXBvcnQgRmxpcCBmcm9tICcuLi9mbGlwJztcblxuZXhwb3J0IGludGVyZmFjZSBDYXJkSW5mbyB7XG4gIGluZGV4OiBudW1iZXI7XG4gIG5vZGU6IEhUTUxFbGVtZW50IHwgbnVsbDtcbiAgdmFsdWU6IHN0cmluZyB8IG51bGw7XG59XG5cbi8qKlxuICogUmV0dXJucyBjYXJkIGluZm8gYnkgcmVmZXJlbmNlLlxuICovXG5mdW5jdGlvbiBnZXRDYXJkSW5mbyhcbiAgdGhpczogRmxpcCxcbiAgc291cmNlOiBudW1iZXIgfCBzdHJpbmcgfCBIVE1MRWxlbWVudCB8IG51bGwsXG4pOiBDYXJkSW5mbyB7XG4gIC8vIG51bGxcbiAgaWYgKHNvdXJjZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiB7XG4gICAgICBub2RlOiBudWxsLFxuICAgICAgaW5kZXg6IC0xLFxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgfTtcbiAgfVxuXG4gIC8vIGNhcmQgbm9kZVxuICBpZiAoc291cmNlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0Q2FyZEluZGV4KHNvdXJjZSk7XG4gICAgY29uc3QgY2FyZCA9IGluZGV4ID09PSAtMSA/IG51bGwgOiBzb3VyY2U7XG5cbiAgICByZXR1cm4ge1xuICAgICAgbm9kZTogY2FyZCxcbiAgICAgIGluZGV4LFxuICAgICAgdmFsdWU6IEZsaXAuZ2V0Q2FyZFZhbHVlKGNhcmQpLFxuICAgIH07XG4gIH1cblxuICAvLyB2YWx1ZVxuICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0Q2FyZEluZGV4KHNvdXJjZSk7XG4gICAgY29uc3QgY2FyZCA9IGluZGV4ID09PSAtMSA/IG51bGwgOiB0aGlzLmdldENhcmROb2RlKGluZGV4KTtcblxuICAgIHJldHVybiB7XG4gICAgICBub2RlOiBjYXJkLFxuICAgICAgaW5kZXgsXG4gICAgICB2YWx1ZTogRmxpcC5nZXRDYXJkVmFsdWUoY2FyZCksXG4gICAgfTtcbiAgfVxuXG4gIC8vIGluZGV4XG4gIGNvbnN0IGNhcmQgPSB0aGlzLmdldENhcmROb2RlKHNvdXJjZSk7XG5cbiAgcmV0dXJuIHtcbiAgICBub2RlOiBjYXJkLFxuICAgIGluZGV4OiBjYXJkID09PSBudWxsID8gLTEgOiBzb3VyY2UsXG4gICAgdmFsdWU6IEZsaXAuZ2V0Q2FyZFZhbHVlKGNhcmQpLFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRDYXJkSW5mbztcbiIsImltcG9ydCBGbGlwIGZyb20gJy4uL2ZsaXAnO1xuXG4vKipcbiAqIFJldHVybnMgY2FyZCBub2RlIGJ5IHJlZmVyZW5jZS5cbiAqL1xuZnVuY3Rpb24gZ2V0Q2FyZE5vZGUoXG4gIHRoaXM6IEZsaXAsXG4gIHNvdXJjZTogbnVtYmVyIHwgc3RyaW5nIHwgbnVsbCxcbik6IEhUTUxFbGVtZW50IHwgbnVsbCB7XG4gIC8vIG51bGxcbiAgaWYgKHNvdXJjZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgLy8gdmFsdWVcbiAgaWYgKHR5cGVvZiBzb3VyY2UgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgY2FyZFJlc3VsdCA9IHRoaXMuY2FyZHNDYXRjaC5maW5kKChjYXJkKSA9PiAoXG4gICAgICBGbGlwLmdldENhcmRWYWx1ZShjYXJkKSA9PT0gc291cmNlXG4gICAgKSk7XG5cbiAgICByZXR1cm4gY2FyZFJlc3VsdCA/PyBudWxsO1xuICB9XG5cbiAgLy8gaW5kZXhcbiAgcmV0dXJuIHRoaXMuY2FyZHNDYXRjaFtzb3VyY2VdID8/IG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldENhcmROb2RlO1xuIiwiaW1wb3J0IEZsaXAgZnJvbSAnLi4vZmxpcCc7XG5cbi8qKlxuICogUmV0dXJucyBjYXJkIHZhbHVlIGJ5IHJlZmVyZW5jZS5cbiAqL1xuZnVuY3Rpb24gZ2V0Q2FyZFZhbHVlKFxuICB0aGlzOiBGbGlwLFxuICBzb3VyY2U6IG51bWJlciB8IEhUTUxFbGVtZW50IHwgbnVsbCxcbik6IHN0cmluZyB8IG51bGwge1xuICAvLyBudWxsXG4gIGlmIChzb3VyY2UgPT09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIC8vIGNhcmQgbm9kZVxuICBpZiAoc291cmNlIGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICByZXR1cm4gRmxpcC5nZXRDYXJkVmFsdWUoc291cmNlKTtcbiAgfVxuXG4gIC8vIGluZGV4XG4gIHJldHVybiBGbGlwLmdldENhcmRWYWx1ZSh0aGlzLmNhcmRzQ2F0Y2hbc291cmNlXSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldENhcmRWYWx1ZTtcbiIsImVudW0gTW9kZSB7XG4gIGxvb3AgPSAnbG9vcCcsXG4gIHJhbmRvbSA9ICdyYW5kb20nLFxufVxuXG5leHBvcnQgZGVmYXVsdCBNb2RlO1xuIiwiaW1wb3J0IEZsaXAgZnJvbSAnLi4vZmxpcCc7XG5pbXBvcnQgTW9kZSBmcm9tICcuLi92YWx1ZXMvbW9kZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0TmV4dENhcmRPcHRpb25zIHtcbiAgZGlmZmVyZW50PzogYm9vbGVhbjtcbiAgbW9kZT86IE1vZGU7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgaW5kZXggb2YgbmV4dCBjYXJkLlxuICovXG5mdW5jdGlvbiBnZXROZXh0Q2FyZEluZGV4KFxuICB0aGlzOiBGbGlwLFxuICBvcHRpb25zOiBHZXROZXh0Q2FyZE9wdGlvbnMgPSB7fSxcbik6IG51bWJlciB7XG4gIGNvbnN0IHtcbiAgICBkaWZmZXJlbnQgPSB0aGlzLmNhcmRzQ2F0Y2gubGVuZ3RoID4gMSxcbiAgICBtb2RlID0gdGhpcy5tb2RlLFxuICB9ID0gb3B0aW9ucztcbiAgY29uc3QgeyBpbmRleCwgY2FyZHNDYXRjaCB9ID0gdGhpcztcbiAgY29uc3QgeyBsZW5ndGggfSA9IGNhcmRzQ2F0Y2g7XG5cbiAgc3dpdGNoIChtb2RlKSB7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgbW9kZTogJHttb2RlfWApO1xuXG4gICAgY2FzZSBNb2RlLmxvb3A6IHtcbiAgICAgIGNvbnN0IG5leHRJbmRleCA9IChpbmRleCArIDEpICUgbGVuZ3RoO1xuXG4gICAgICByZXR1cm4gKG5leHRJbmRleCA9PT0gaW5kZXggJiYgZGlmZmVyZW50XG4gICAgICAgID8gLTFcbiAgICAgICAgOiBuZXh0SW5kZXhcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY2FzZSBNb2RlLnJhbmRvbToge1xuICAgICAgc3dpdGNoIChsZW5ndGgpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHJldHVybiAtMTtcblxuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgcmV0dXJuIGRpZmZlcmVudCA/IC0xIDogdGhpcy5pbmRleDtcblxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgbGV0IG5leHRJbmRleCA9IC0xO1xuXG4gICAgICAgICAgd2hpbGUgKFxuICAgICAgICAgICAgbmV4dEluZGV4ID09PSAtMVxuICAgICAgICAgICAgfHwgKG5leHRJbmRleCA9PT0gaW5kZXggJiYgZGlmZmVyZW50KVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgbmV4dEluZGV4ID0gTWF0aC5mbG9vcihsZW5ndGggKiBNYXRoLnJhbmRvbSgpKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gbmV4dEluZGV4O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldE5leHRDYXJkSW5kZXg7XG4iLCIvKipcbiAqIFJldHVybnMgY2xvbmVkIGNhcmQgZWxlbWVudC5cbiAqXG4gKiBUT0RPOiBjbG9uZSBzdHlsZT9cbiAqL1xuZnVuY3Rpb24gY2xvbmVDYXJkKGNhcmQ6IEhUTUxFbGVtZW50KTogSFRNTEVsZW1lbnQge1xuICBjb25zdCBuZXdDYXJkID0gY2FyZC5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTEVsZW1lbnQ7XG5cbiAgeyAvLyBjYXNlIG9mIGNhbnZhc1xuICAgIGNvbnN0IG5ld0NhcmRDYW52YXNlcyA9IEFycmF5LmZyb20obmV3Q2FyZC5xdWVyeVNlbGVjdG9yQWxsKCdjYW52YXMnKSk7XG5cbiAgICBpZiAobmV3Q2FyZCBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50KSB7XG4gICAgICBuZXdDYXJkQ2FudmFzZXMucHVzaChuZXdDYXJkKTtcbiAgICB9XG4gICAgaWYgKG5ld0NhcmRDYW52YXNlcy5sZW5ndGggPiAwKSB7XG4gICAgICBjYXJkLnF1ZXJ5U2VsZWN0b3JBbGwoJ2NhbnZhcycpLmZvckVhY2goKGRvbSwgZG9tSW5kZXgpID0+IHtcbiAgICAgICAgY29uc3QgY2FyZENhbnZhcyA9IGRvbSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcbiAgICAgICAgY29uc3QgbmV3Q2FudmFzID0gbmV3Q2FyZENhbnZhc2VzW2RvbUluZGV4XSBhcyBIVE1MQ2FudmFzRWxlbWVudDtcblxuICAgICAgICBuZXdDYW52YXMud2lkdGggPSBjYXJkQ2FudmFzLndpZHRoO1xuICAgICAgICBuZXdDYW52YXMuaGVpZ2h0ID0gY2FyZENhbnZhcy5oZWlnaHQ7XG4gICAgICAgIG5ld0NhbnZhcy5nZXRDb250ZXh0KCcyZCcpPy5kcmF3SW1hZ2UoY2FyZENhbnZhcywgMCwgMCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3Q2FyZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVDYXJkO1xuIiwiZW51bSBBdHRyaWJ1dGUge1xuICBpbmRleCA9ICdpbmRleCcsXG4gIHZhbHVlID0gJ3ZhbHVlJyxcbiAgbW9kZSA9ICdtb2RlJyxcbiAgZGlyZWN0ID0gJ2RpcmVjdCcsXG4gIGR1cmF0aW9uID0gJ2R1cmF0aW9uJyxcbiAgZGlyZWN0aW9uID0gJ2RpcmVjdGlvbicsXG4gIG1pbkZsaXBzID0gJ21pbi1mbGlwcycsXG4gIG1heEZsaXBzID0gJ21heC1mbGlwcycsXG4gIHBlcnNwZWN0aXZlID0gJ3BlcnNwZWN0aXZlJyxcbn1cblxuZXhwb3J0IGRlZmF1bHQgQXR0cmlidXRlO1xuIiwiaW1wb3J0IGZsaXAsIHsgRmxpcE9wdGlvbnMgfSBmcm9tICcuL21ldGhvZHMvZmxpcCc7XG5pbXBvcnQgZmxpcEFuaW1hdGlvbiBmcm9tICcuL21ldGhvZHMvZmxpcC9mbGlwQW5pbWF0aW9uJztcbmltcG9ydCBnZXRDYXJkSW5kZXggZnJvbSAnLi9tZXRob2RzL2dldENhcmRJbmRleCc7XG5pbXBvcnQgZ2V0Q2FyZEluZm8gZnJvbSAnLi9tZXRob2RzL2dldENhcmRJbmZvJztcbmltcG9ydCBnZXRDYXJkTm9kZSBmcm9tICcuL21ldGhvZHMvZ2V0Q2FyZE5vZGUnO1xuaW1wb3J0IGdldENhcmRWYWx1ZSBmcm9tICcuL21ldGhvZHMvZ2V0Q2FyZFZhbHVlJztcbmltcG9ydCBnZXROZXh0Q2FyZEluZGV4IGZyb20gJy4vbWV0aG9kcy9nZXROZXh0Q2FyZEluZGV4JztcbmltcG9ydCBjbG9uZUNhcmQgZnJvbSAnLi91dGlscy9jbG9uZUNhcmQnO1xuaW1wb3J0IHJlZ2lzdGVyRWxlbWVudCBmcm9tICcuL3V0aWxzL3JlZ2lzdGVyRWxlbWVudCc7XG5pbXBvcnQgQXR0cmlidXRlIGZyb20gJy4vdmFsdWVzL2F0dHJpYnV0ZSc7XG5pbXBvcnQgRGlyZWN0aW9uIGZyb20gJy4vdmFsdWVzL2RpcmVjdGlvbic7XG5pbXBvcnQgRXZlbnQgZnJvbSAnLi92YWx1ZXMvZXZlbnQnO1xuaW1wb3J0IE1vZGUgZnJvbSAnLi92YWx1ZXMvbW9kZSc7XG5pbXBvcnQgU2xvdCBmcm9tICcuL3ZhbHVlcy9zbG90JztcblxuY29uc3Qgbm9kZU5hbWUgPSAnZmxpcC1wYWNrJztcblxuY29uc3QgeyBpc05hTiB9ID0gZ2xvYmFsVGhpcztcbmNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMgPSB7XG4gIFtBdHRyaWJ1dGUubW9kZV06IE1vZGUubG9vcCxcbiAgW0F0dHJpYnV0ZS5kaXJlY3RdOiBmYWxzZSxcbiAgW0F0dHJpYnV0ZS5kdXJhdGlvbl06IDQwMCxcbiAgW0F0dHJpYnV0ZS5kaXJlY3Rpb25dOiBEaXJlY3Rpb24uZG93bixcbiAgW0F0dHJpYnV0ZS5pbmRleF06IC0xLFxuICBbQXR0cmlidXRlLm1pbkZsaXBzXTogMCxcbiAgW0F0dHJpYnV0ZS5tYXhGbGlwc106IEluZmluaXR5LFxufTtcblxudGVtcGxhdGUuaW5uZXJIVE1MID0gYFxuICA8c3R5bGU+XG4gICAgOmhvc3Qge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIH1cblxuICAgIHNsb3Qge1xuICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgei1pbmRleDogMDtcbiAgICB9XG5cbiAgICBzbG90Om5vdChbbmFtZV0pIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuICA8L3N0eWxlPlxuICA8ZmxpcD5cbiAgICA8c2xvdD48L3Nsb3Q+XG4gICAgPHNsb3QgbmFtZT1cIiR7U2xvdC5jdXJyZW50fVwiPjwvc2xvdD5cbiAgICA8c2xvdCBuYW1lPVwiJHtTbG90LnRlbXB9XCI+PC9zbG90PlxuICA8L2ZsaXA+XG5gO1xuXG5leHBvcnQgaW50ZXJmYWNlIEZsaXBwaW5nT3B0aW9uIHtcbiAgZHVyYXRpb246IG51bWJlcjtcbiAgaW5kZXg6IG51bWJlcjtcbiAgbGFzdEluZGV4OiBudW1iZXI7XG4gIGxhc3RDYXJkOiBIVE1MRWxlbWVudCB8IG51bGw7XG4gIHRlbXBDYXJkOiBIVE1MRWxlbWVudDtcbn1cblxuY2xhc3MgRmxpcCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgcHJvdGVjdGVkIGNhcmRzQ2F0Y2g6IEhUTUxFbGVtZW50W10gPSBbXTtcblxuICBwcm90ZWN0ZWQgcm9vdEVsZW1lbnQ6IEhUTUxFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBjb25zdCBzaGFkb3dSb290ID0gdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG5cbiAgICBzaGFkb3dSb290LmFwcGVuZCh0ZW1wbGF0ZS5jb250ZW50LmNsb25lTm9kZSh0cnVlKSk7XG4gICAgdGhpcy5yb290RWxlbWVudCA9IHNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignZmxpcCcpIGFzIEhUTUxFbGVtZW50O1xuICAgIChzaGFkb3dSb290LnF1ZXJ5U2VsZWN0b3IoJ3Nsb3Q6bm90KFtuYW1lXSknKSBhcyBIVE1MU2xvdEVsZW1lbnQpXG4gICAgICAuYWRkRXZlbnRMaXN0ZW5lcignc2xvdGNoYW5nZScsICgpID0+IHtcbiAgICAgICAgdGhpcy5jYXJkc0NhdGNoID0gQXJyYXkuZnJvbShcbiAgICAgICAgICB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoJzpzY29wZSA+IDpub3QoW3Nsb3Q9dGVtcF0pJyksXG4gICAgICAgICk7XG5cbiAgICAgICAgY29uc3QgeyBpbmRleCwgY2FyZHNDYXRjaCB9ID0gdGhpcztcblxuICAgICAgICBpZiAoaW5kZXggPT09IC0xIHx8IGluZGV4ID49IGNhcmRzQ2F0Y2gubGVuZ3RoKSB7XG4gICAgICAgICAgdGhpcy5pbmRleCA9IGNhcmRzQ2F0Y2gubGVuZ3RoID4gMCA/IDAgOiAtMTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gIH1cblxuICBzdGF0aWMgZ2V0IERJUkVDVElPTigpIHtcbiAgICByZXR1cm4geyAuLi5EaXJlY3Rpb24gfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgTU9ERSgpIHtcbiAgICByZXR1cm4geyAuLi5Nb2RlIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0IEVWRU5UKCkge1xuICAgIHJldHVybiB7IC4uLkV2ZW50IH07XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBjbG9uZWQgY2FyZCBub2RlLlxuICAgKi9cbiAgc3RhdGljIGNsb25lQ2FyZCA9IGNsb25lQ2FyZFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHZhbHVlIG9mIGNhcmQgbm9kZS5cbiAgICovXG4gIHN0YXRpYyBnZXRDYXJkVmFsdWUoY2FyZDogSFRNTEVsZW1lbnQgfCBudWxsKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIGNhcmQ/LmdldEF0dHJpYnV0ZT8uKEF0dHJpYnV0ZS52YWx1ZSkgPz8gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGNhcmQgZWxlbWVudHMuXG4gICAqL1xuICBnZXQgY2FyZHMoKTogSFRNTEVsZW1lbnRbXSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLmNhcmRzQ2F0Y2hdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmxpcHBpbmcgbW9kZS5cbiAgICovXG4gIGdldCBtb2RlKCk6IE1vZGUge1xuICAgIGNvbnN0IG1vZGUgPSB0aGlzLmdldEF0dHJpYnV0ZShBdHRyaWJ1dGUubW9kZSkgYXMgTW9kZTtcblxuICAgIHJldHVybiAobW9kZSA9PT0gbnVsbCB8fCAhT2JqZWN0LnZhbHVlcyhNb2RlKS5pbmNsdWRlcyhtb2RlKVxuICAgICAgPyBkZWZhdWx0QXR0cmlidXRlVmFsdWVzW0F0dHJpYnV0ZS5tb2RlXVxuICAgICAgOiBtb2RlXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGZsaXBwaW5nIG1vZGUuXG4gICAqL1xuICBzZXQgbW9kZShtb2RlOiBNb2RlKSB7XG4gICAgaWYgKCFPYmplY3QudmFsdWVzKE1vZGUpLmluY2x1ZGVzKG1vZGUpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIG1vZGU6ICR7bW9kZX1gKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldEF0dHJpYnV0ZShBdHRyaWJ1dGUubW9kZSwgbW9kZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBkaXJlY3RseSBmbGlwcGluZy5cbiAgICovXG4gIGdldCBkaXJlY3QoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKEF0dHJpYnV0ZS5kaXJlY3QpICE9PSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgZGlyZWN0bHkgZmxpcHBpbmcuXG4gICAqL1xuICBzZXQgZGlyZWN0KGRpcmVjdDogYm9vbGVhbikge1xuICAgIGlmIChkaXJlY3QpIHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKEF0dHJpYnV0ZS5kaXJlY3QsICcnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW1vdmVBdHRyaWJ1dGUoQXR0cmlidXRlLmRpcmVjdCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmxpcHBpbmcgZHVyYXRpb24uXG4gICAqL1xuICBnZXQgZHVyYXRpb24oKTogbnVtYmVyIHtcbiAgICBjb25zdCBkdXJhdGlvbiA9IHRoaXMuZ2V0QXR0cmlidXRlKEF0dHJpYnV0ZS5kdXJhdGlvbik7XG5cbiAgICByZXR1cm4gKGR1cmF0aW9uID09PSBudWxsIHx8IGR1cmF0aW9uLmxlbmd0aCA9PT0gMFxuICAgICAgPyBkZWZhdWx0QXR0cmlidXRlVmFsdWVzW0F0dHJpYnV0ZS5kdXJhdGlvbl1cbiAgICAgIDogTnVtYmVyKGR1cmF0aW9uKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyBmbGlwcGluZyBkdXJhdGlvbi5cbiAgICovXG4gIHNldCBkdXJhdGlvbihkdXJhdGlvbjogbnVtYmVyKSB7XG4gICAgaWYgKGlzTmFOKGR1cmF0aW9uKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBkdXJhdGlvbjogJHtkdXJhdGlvbn1gKTtcbiAgICB9IGVsc2UgaWYgKGR1cmF0aW9uIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYER1cmF0aW9uIHNob3VsZCBub3QgYmUgbGVzc2VyIHRoYW4gMDogJHtkdXJhdGlvbn1gKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldEF0dHJpYnV0ZShBdHRyaWJ1dGUuZHVyYXRpb24sIGAke2R1cmF0aW9ufWApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgZmxpcHBpbmcgZGlyZWN0aW9uLlxuICAgKi9cbiAgZ2V0IGRpcmVjdGlvbigpOiBEaXJlY3Rpb24ge1xuICAgIGNvbnN0IGRpcmVjdGlvbiA9IHRoaXMuZ2V0QXR0cmlidXRlKEF0dHJpYnV0ZS5kaXJlY3Rpb24pIGFzIERpcmVjdGlvbjtcblxuICAgIHJldHVybiAoT2JqZWN0LnZhbHVlcyhEaXJlY3Rpb24pLmluY2x1ZGVzKGRpcmVjdGlvbilcbiAgICAgID8gZGlyZWN0aW9uXG4gICAgICA6IGRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNbQXR0cmlidXRlLmRpcmVjdGlvbl1cbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgZmxpcHBpbmcgZGlyZWN0aW9uLlxuICAgKi9cbiAgc2V0IGRpcmVjdGlvbihkaXJlY3Rpb246IERpcmVjdGlvbikge1xuICAgIGlmICghT2JqZWN0LnZhbHVlcyhEaXJlY3Rpb24pLmluY2x1ZGVzKGRpcmVjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEludmFsaWQgZGlyZWN0aW9uOiAke2RpcmVjdGlvbn1gKTtcbiAgICB9XG5cbiAgICB0aGlzLnNldEF0dHJpYnV0ZShBdHRyaWJ1dGUuZGlyZWN0aW9uLCBkaXJlY3Rpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbWluIGZsaXBzLlxuICAgKi9cbiAgZ2V0IG1pbkZsaXBzKCk6IG51bWJlciB7XG4gICAgY29uc3QgbWluRmxpcHMgPSB0aGlzLmdldEF0dHJpYnV0ZShBdHRyaWJ1dGUubWluRmxpcHMpO1xuXG4gICAgcmV0dXJuIChtaW5GbGlwcyA9PT0gbnVsbCB8fCBtaW5GbGlwcy5sZW5ndGggPT09IDBcbiAgICAgID8gZGVmYXVsdEF0dHJpYnV0ZVZhbHVlc1tBdHRyaWJ1dGUubWluRmxpcHNdXG4gICAgICA6IE51bWJlcihtaW5GbGlwcylcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgbWluIGZsaXBzLlxuICAgKi9cbiAgc2V0IG1pbkZsaXBzKG1pbkZsaXBzOiBudW1iZXIpIHtcbiAgICBpZiAoaXNOYU4obWluRmxpcHMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIG1pbiBmbGlwczogJHttaW5GbGlwc31gKTtcbiAgICB9IGVsc2UgaWYgKHBhcnNlSW50KGAke21pbkZsaXBzfWAsIDEwKSAhPT0gbWluRmxpcHMpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE1pbiBmbGlwcyBzaG91bGQgYmUgYW4gaW50ZWdlcjogJHttaW5GbGlwc31gKTtcbiAgICB9IGVsc2UgaWYgKG1pbkZsaXBzIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYE1pbiBmbGlwcyBzaG91bGQgbm90IGJlIGxlc3NlciB0aGFuIDA6ICR7bWluRmxpcHN9YCk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoQXR0cmlidXRlLm1pbkZsaXBzLCBgJHttaW5GbGlwc31gKTtcblxuICAgIGlmICh0aGlzLm1heEZsaXBzIDwgbWluRmxpcHMpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgICAnU2V0dGluZyBtaW4gZmxpcHMgdGhhdCBpcyBncmVhdGVyIHRoYW4gbWF4IGZsaXBzIG1pZ2h0IGNhdXNlIGZsaXBwaW5nIGVycm9yJyxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbWF4IGZsaXBzLlxuICAgKi9cbiAgZ2V0IG1heEZsaXBzKCk6IG51bWJlciB7XG4gICAgY29uc3QgbWF4RmxpcHMgPSB0aGlzLmdldEF0dHJpYnV0ZShBdHRyaWJ1dGUubWF4RmxpcHMpO1xuXG4gICAgcmV0dXJuIChtYXhGbGlwcyA9PT0gbnVsbCB8fCBtYXhGbGlwcy5sZW5ndGggPT09IDBcbiAgICAgID8gZGVmYXVsdEF0dHJpYnV0ZVZhbHVlc1tBdHRyaWJ1dGUubWF4RmxpcHNdXG4gICAgICA6IE51bWJlcihtYXhGbGlwcylcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgbWF4IGZsaXBzLlxuICAgKi9cbiAgc2V0IG1heEZsaXBzKG1heEZsaXBzOiBudW1iZXIpIHtcbiAgICBpZiAoaXNOYU4obWF4RmxpcHMpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIG1heCBmbGlwczogJHttYXhGbGlwc31gKTtcbiAgICB9IGVsc2UgaWYgKHBhcnNlSW50KGAke21heEZsaXBzfWAsIDEwKSAhPT0gbWF4RmxpcHMpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYE1heCBmbGlwcyBzaG91bGQgYmUgYW4gaW50ZWdlcjogJHttYXhGbGlwc31gKTtcbiAgICB9IGVsc2UgaWYgKG1heEZsaXBzIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYE1heCBmbGlwcyBzaG91bGQgbm90IGJlIGxlc3NlciB0aGFuIDA6ICR7bWF4RmxpcHN9YCk7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoQXR0cmlidXRlLm1heEZsaXBzLCBgJHttYXhGbGlwc31gKTtcblxuICAgIGlmICh0aGlzLm1pbkZsaXBzID4gbWF4RmxpcHMpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgICAnU2V0dGluZyBtYXggZmxpcHMgdGhhdCBpcyBsZXNzIHRoYW4gbWluIGZsaXBzIG1pZ2h0IGNhdXNlIGZsaXBwaW5nIGVycm9yJyxcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgM0QgcGVyc3BlY3RpdmUgdmFsdWUuXG4gICAqL1xuICBnZXQgcGVyc3BlY3RpdmUoKTogc3RyaW5nIHtcbiAgICBjb25zdCBwZXJzcGVjdGl2ZSA9IHRoaXMuZ2V0QXR0cmlidXRlKEF0dHJpYnV0ZS5wZXJzcGVjdGl2ZSk7XG5cbiAgICBpZiAocGVyc3BlY3RpdmUgIT09IG51bGwpIHtcbiAgICAgIHJldHVybiBwZXJzcGVjdGl2ZTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGNsaWVudFdpZHRoLCBjbGllbnRIZWlnaHQgfSA9IHRoaXM7XG4gICAgY29uc3Qgc2l6ZSA9IDIgKiBNYXRoLm1heChjbGllbnRXaWR0aCwgY2xpZW50SGVpZ2h0KTtcblxuICAgIHJldHVybiBgJHtzaXplfXB4YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIDNEIHBlcnNwZWN0aXZlIHZhbHVlLlxuICAgKi9cbiAgc2V0IHBlcnNwZWN0aXZlKHBlcnNwZWN0aXZlOiBzdHJpbmcpIHtcbiAgICBpZiAodHlwZW9mIHBlcnNwZWN0aXZlID09PSAnc3RyaW5nJyAmJiBwZXJzcGVjdGl2ZS5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShBdHRyaWJ1dGUucGVyc3BlY3RpdmUsIHBlcnNwZWN0aXZlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBjdXJyZW50IGluZGV4LlxuICAgKi9cbiAgZ2V0IGluZGV4KCk6IG51bWJlciB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmdldEF0dHJpYnV0ZShBdHRyaWJ1dGUuaW5kZXgpO1xuXG4gICAgaWYgKGluZGV4ID09PSBudWxsIHx8IGluZGV4Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXNbQXR0cmlidXRlLmluZGV4XTtcbiAgICB9XG5cbiAgICByZXR1cm4gTnVtYmVyKGluZGV4KSAlIHRoaXMuY2FyZHMubGVuZ3RoO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgY3VycmVudCBpbmRleC5cbiAgICovXG4gIHNldCBpbmRleChpbmRleDogbnVtYmVyKSB7XG4gICAgaWYgKGlzTmFOKGluZGV4KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBpbmRleDogJHtpbmRleH1gKTtcbiAgICB9IGVsc2UgaWYgKHBhcnNlSW50KGAke2luZGV4fWAsIDEwKSAhPT0gaW5kZXgpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYEluZGV4IHNob3VsZCBiZSBhbiBpbnRlZ2VyOiAke2luZGV4fWApO1xuICAgIH1cblxuICAgIGNvbnN0IHsgY2FyZHNDYXRjaCB9ID0gdGhpcztcbiAgICBjb25zdCBjYXJkSW5mbyA9IHRoaXMuZ2V0Q2FyZEluZm8oaW5kZXgpO1xuICAgIGNvbnN0IHtcbiAgICAgIGluZGV4OiBjYXJkSW5kZXgsXG4gICAgICB2YWx1ZTogY2FyZFZhbHVlLFxuICAgICAgbm9kZTogY2FyZE5vZGUsXG4gICAgfSA9IGNhcmRJbmZvO1xuXG4gICAgaWYgKGNhcmROb2RlID09PSBudWxsICYmIGNhcmRzQ2F0Y2gubGVuZ3RoID4gMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbGxlZ2FsIGluZGV4OiAke2luZGV4fWApO1xuICAgIH1cblxuICAgIGlmIChjYXJkSW5kZXggIT09IHRoaXMuaW5kZXgpIHtcbiAgICAgIHRoaXMucXVlcnlTZWxlY3RvckFsbChgW3Nsb3Q9XCIke1Nsb3QuY3VycmVudH1cIl1gKS5mb3JFYWNoKChjYXJkKSA9PiB7XG4gICAgICAgIGNhcmQucmVtb3ZlQXR0cmlidXRlKCdzbG90Jyk7XG4gICAgICB9KTtcbiAgICAgIGNhcmROb2RlPy5zZXRBdHRyaWJ1dGU/Lignc2xvdCcsIFNsb3QuY3VycmVudCk7XG4gICAgICB0aGlzLnNldEF0dHJpYnV0ZShBdHRyaWJ1dGUuaW5kZXgsIGAke2NhcmRJbmRleH1gKTtcblxuICAgICAgaWYgKGNhcmRWYWx1ZSkge1xuICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShBdHRyaWJ1dGUudmFsdWUsIGNhcmRWYWx1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShBdHRyaWJ1dGUudmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGN1cnJlbnQgdmFsdWUuXG4gICAqL1xuICBnZXQgdmFsdWUoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q2FyZFZhbHVlKHRoaXMuaW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgY3VycmVudCB2YWx1ZS5cbiAgICovXG4gIHNldCB2YWx1ZSh2YWx1ZTogc3RyaW5nIHwgbnVsbCkge1xuICAgIGlmICh2YWx1ZSAhPT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGBJbnZhbGlkIHZhbHVlOiAke3ZhbHVlfWApO1xuICAgIH1cblxuICAgIHRoaXMuaW5kZXggPSB0aGlzLmdldENhcmRJbmRleCh2YWx1ZSBhcyBzdHJpbmcpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgY3VycmVudCBjYXJkLlxuICAgKi9cbiAgZ2V0IGNhcmQoKTogSFRNTEVsZW1lbnQgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDYXJkTm9kZSh0aGlzLmluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGN1cnJlbnQgY2FyZC5cbiAgICovXG4gIHNldCBjYXJkKGNhcmQ6IEhUTUxFbGVtZW50IHwgbnVsbCkge1xuICAgIHRoaXMuaW5kZXggPSB0aGlzLmdldENhcmRJbmRleChjYXJkIGFzIEhUTUxFbGVtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGNhcmQgbm9kZS5cbiAgICovXG4gIGdldENhcmROb2RlID0gZ2V0Q2FyZE5vZGVcblxuICAvKipcbiAgICogUmV0dXJucyBjYXJkIGluZGV4LlxuICAgKi9cbiAgZ2V0Q2FyZEluZGV4ID0gZ2V0Q2FyZEluZGV4XG5cbiAgLyoqXG4gICAqIFJldHVybnMgY2FyZCB2YWx1ZS5cbiAgICovXG4gIGdldENhcmRWYWx1ZSA9IGdldENhcmRWYWx1ZVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGNhcmQgaW5mby5cbiAgICovXG4gIGdldENhcmRJbmZvID0gZ2V0Q2FyZEluZm9cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgaW5kZXggb2YgbmV4dCBjYXJkLlxuICAgKi9cbiAgZ2V0TmV4dENhcmRJbmRleCA9IGdldE5leHRDYXJkSW5kZXhcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbm9kZSBvZiBuZXh0IGNhcmQuXG4gICAqL1xuICBnZXROZXh0Q2FyZE5vZGUoLi4uYXJnczogUGFyYW1ldGVyczxGbGlwWydnZXROZXh0Q2FyZEluZGV4J10+KTogUmV0dXJuVHlwZTxGbGlwWydnZXRDYXJkTm9kZSddPiB7XG4gICAgY29uc3QgbmV4dEluZGV4ID0gdGhpcy5nZXROZXh0Q2FyZEluZGV4KC4uLmFyZ3MpO1xuXG4gICAgcmV0dXJuIHRoaXMuZ2V0Q2FyZE5vZGUobmV4dEluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBuZXh0IGNhcmQuXG4gICAqL1xuICBnZXROZXh0Q2FyZFZhbHVlKC4uLmFyZ3M6IFBhcmFtZXRlcnM8RmxpcFsnZ2V0TmV4dENhcmRJbmRleCddPik6IFJldHVyblR5cGU8RmxpcFsnZ2V0Q2FyZFZhbHVlJ10+IHtcbiAgICBjb25zdCBuZXh0SW5kZXggPSB0aGlzLmdldE5leHRDYXJkSW5kZXgoLi4uYXJncyk7XG5cbiAgICByZXR1cm4gdGhpcy5nZXRDYXJkVmFsdWUobmV4dEluZGV4KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBpbmZvIG9mIG5leHQgY2FyZC5cbiAgICovXG4gIGdldE5leHRDYXJkSW5mbyguLi5hcmdzOiBQYXJhbWV0ZXJzPEZsaXBbJ2dldE5leHRDYXJkSW5kZXgnXT4pOiBSZXR1cm5UeXBlPEZsaXBbJ2dldENhcmRJbmZvJ10+IHtcbiAgICBjb25zdCBuZXh0SW5kZXggPSB0aGlzLmdldE5leHRDYXJkSW5kZXgoLi4uYXJncyk7XG5cbiAgICByZXR1cm4gdGhpcy5nZXRDYXJkSW5mbyhuZXh0SW5kZXgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZsaXBzIHRvIGNhcmQgYnkgcmVmZXJlbmNlLlxuICAgKi9cbiAgZmxpcChcbiAgICBzb3VyY2U6IG51bWJlciB8IHN0cmluZyB8IEhUTUxFbGVtZW50LFxuICAgIG9wdGlvbnM/OiBGbGlwT3B0aW9ucyxcbiAgKTogUmV0dXJuVHlwZTx0eXBlb2YgZmxpcD5cblxuICBmbGlwKG9wdGlvbnM/OiBGbGlwT3B0aW9ucyk6IFJldHVyblR5cGU8dHlwZW9mIGZsaXA+XG5cbiAgZmxpcCguLi5hcmdzOiBQYXJhbWV0ZXJzPHR5cGVvZiBmbGlwPikge1xuICAgIHJldHVybiBmbGlwLmNhbGwodGhpcywgLi4uYXJncyk7XG4gIH1cblxuICAvKipcbiAgICogRG9lcyBmbGlwcGluZyBhbmltYXRpb24gZnJvbSBsYXN0IGNhcmQgdG8gbmV4dCBjYXJkLlxuICAgKi9cbiAgZmxpcEFuaW1hdGlvbiA9IGZsaXBBbmltYXRpb25cbn1cblxucmVnaXN0ZXJFbGVtZW50KEZsaXAsIG5vZGVOYW1lKTtcblxuZXhwb3J0IGRlZmF1bHQgRmxpcDtcbiIsIi8qKlxuICogUmVnaXN0ZXJzIGVsZW1lbnQuXG4gKi9cbmZ1bmN0aW9uIHJlZ2lzdGVyRWxlbWVudChcbiAgTm9kZTogdHlwZW9mIEhUTUxFbGVtZW50LFxuICBub2RlTmFtZTogc3RyaW5nLFxuKTogUmV0dXJuVHlwZTx0eXBlb2YgY3VzdG9tRWxlbWVudHMud2hlbkRlZmluZWQ+IHtcbiAgaWYgKGN1c3RvbUVsZW1lbnRzLmdldChub2RlTmFtZSkpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICBuZXcgRXJyb3IoYEFscmVhZHkgZGVmaW5lZCA8JHtub2RlTmFtZX0+YCksXG4gICAgKTtcbiAgfVxuXG4gIGN1c3RvbUVsZW1lbnRzLmRlZmluZShub2RlTmFtZSwgTm9kZSk7XG5cbiAgcmV0dXJuIGN1c3RvbUVsZW1lbnRzLndoZW5EZWZpbmVkKG5vZGVOYW1lKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVnaXN0ZXJFbGVtZW50O1xuIl0sIm5hbWVzIjpbInRyaWdnZXJFdmVudCIsInJlZiIsInR5cGUiLCJvcHRpb25zIiwiZGlzcGF0Y2hFdmVudCIsIkN1c3RvbUV2ZW50IiwiRXZlbnQiLCJjbGFzc05hbWUiLCJzbG90Iiwic3R5bGUiLCJhdHRyaWJ1dGVzIiwiaW5uZXJIVE1MIiwidGVtcE5vZGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJhdHRhY2hTaGFkb3ciLCJtb2RlIiwidW5kZWZpbmVkIiwiY2xhc3NMaXN0IiwiYWRkIiwic2V0QXR0cmlidXRlIiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJrZXkiLCJDbGFzc05hbWUiLCJTbG90IiwiYXN5bmMiLCJuZXh0Q2FyZEluZm8iLCJpbmRleCIsIm5leHRJbmRleCIsInRlbXBDYXJkTm9kZSIsImNyZWF0ZVRlbXBOb2RlIiwibGFzdFRlbXBDYXJkIiwidGhpcyIsInF1ZXJ5U2VsZWN0b3IiLCJyZW1vdmUiLCJhcHBlbmQiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsImNvbXBvc2VkIiwiZGV0YWlsIiwiZmxpcEFuaW1hdGlvbiIsImFyZzAiLCJhcmcxIiwiSFRNTEVsZW1lbnQiLCJkaWZmZXJlbnQiLCJjYXJkc0NhdGNoIiwibGVuZ3RoIiwiZGlyZWN0IiwiZHVyYXRpb24iLCJkaXJlY3Rpb24iLCJ0YXJnZXRTb3VyY2UiLCJnZXROZXh0Q2FyZEluZGV4IiwidGFyZ2V0Q2FyZEluZm8iLCJnZXRDYXJkSW5mbyIsInRhcmdldEluZGV4Iiwibm9kZSIsInRhcmdldE5vZGUiLCJSZWZlcmVuY2VFcnJvciIsImxhc3RDYXJkSW5mbyIsImZsaXBPbmVDYXJkIiwibWluRmxpcHMiLCJtYXhGbGlwcyIsImZsaXBOZXh0IiwidGltZXMiLCJjdXJyZW50Q2FyZEluZm8iLCJEaXJlY3Rpb24iLCJjc3MiLCJwcmVmaXhzIiwiaGVhZCIsInRlc3QiLCJ0ZXh0IiwicmVwbGFjZSIsIkFycmF5IiwiaXNBcnJheSIsIm1hcCIsInByZWZpeCIsImNvbmNhdCIsImpvaW4iLCJsYXN0Q2FyZE5vZGUiLCJuZXh0Q2FyZE5vZGUiLCJkdXJhdGlvblNlYyIsImRvbUJhY2tncm91bmQiLCJwcmVmaXhDc3MiLCJkb21DYXJkIiwiZmxpcCIsInBlcnNwZWN0aXZlIiwiZG9tTmV4dCIsImRvbU5leHRDYXJkIiwiRmxpcCIsInNldFByb3BlcnR5IiwicmVtb3ZlQXR0cmlidXRlIiwiZG9tTGFzdCIsImRvbUxhc3RDYXJkIiwiUHJvbWlzZSIsInJlc29sdmUiLCJhZGRFdmVudExpc3RlbmVyIiwib25jZSIsIlR5cGVFcnJvciIsImZsaXBwaW5nVmVydGljYWxseSIsImZsaXBwaW5nSG9yaXpvbnRhbGx5Iiwic291cmNlIiwiaW5kZXhPZiIsImZpbmRJbmRleCIsImNhcmQiLCJ2YWx1ZSIsImdldENhcmRJbmRleCIsImdldENhcmROb2RlIiwiZmluZCIsIk1vZGUiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJuZXdDYXJkIiwiY2xvbmVOb2RlIiwibmV3Q2FyZENhbnZhc2VzIiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJIVE1MQ2FudmFzRWxlbWVudCIsInB1c2giLCJkb20iLCJkb21JbmRleCIsImNhcmRDYW52YXMiLCJuZXdDYW52YXMiLCJ3aWR0aCIsImhlaWdodCIsImdldENvbnRleHQiLCJkcmF3SW1hZ2UiLCJBdHRyaWJ1dGUiLCJpc05hTiIsImdsb2JhbFRoaXMiLCJ0ZW1wbGF0ZSIsImRlZmF1bHRBdHRyaWJ1dGVWYWx1ZXMiLCJJbmZpbml0eSIsImNvbnN0cnVjdG9yIiwic3VwZXIiLCJzaGFkb3dSb290IiwiY29udGVudCIsInJvb3RFbGVtZW50IiwiY2xvbmVDYXJkIiwiZ2V0QXR0cmlidXRlIiwidmFsdWVzIiwiaW5jbHVkZXMiLCJOdW1iZXIiLCJSYW5nZUVycm9yIiwicGFyc2VJbnQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIm1heCIsImNhcmRzIiwiY2FyZEluZm8iLCJjYXJkSW5kZXgiLCJjYXJkVmFsdWUiLCJjYXJkTm9kZSIsIkVycm9yIiwiZ2V0Q2FyZFZhbHVlIiwiZ2V0TmV4dENhcmROb2RlIiwiYXJncyIsImdldE5leHRDYXJkVmFsdWUiLCJnZXROZXh0Q2FyZEluZm8iLCJOb2RlIiwibm9kZU5hbWUiLCJjdXN0b21FbGVtZW50cyIsImdldCIsInJlamVjdCIsImRlZmluZSIsIndoZW5EZWZpbmVkIl0sInNvdXJjZVJvb3QiOiIifQ==