(()=>{"use strict";function t(t,e,n){return t.dispatchEvent(new CustomEvent(e,n))}var e;!function(t){t.flipStart="flipstart",t.flipCandidateStart="flipcandidatestart",t.flipCandidateEnd="flipcandidateend",t.flipEnd="flipend"}(e||(e={}));const n=e,i=function(t={}){const{className:e,slot:n,style:i="",attributes:r={},innerHTML:a="<slot></slot>"}=t,s=document.createElement("div");return s.attachShadow({mode:"open"}).innerHTML=`\n    <style>\n      \n  :host {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    pointer-events: none;\n    display: block;\n  }\n\n  slot {\n    display: block;\n  }\n\n      ${i}\n    </style>\n    ${a}\n  `,void 0!==e&&s.classList.add(e),void 0!==n&&s.setAttribute("slot",n),Object.keys(r).forEach((t=>{s.setAttribute(t,r[t])})),s};var r;!function(t){t.temp="temp"}(r||(r={}));const a=r;var s;!function(t){t.current="current",t.temp="temp"}(s||(s={}));const o=s,d=async function(e){const{nextCandidateInfo:r}=e,{index:s}=r,d=i({className:a.temp,slot:o.temp}),l=this.querySelector(`.${a.temp}`);l&&l.remove(),this.index=s,this.append(d),t(this,n.flipCandidateStart,{bubbles:!0,cancelable:!0,composed:!0,detail:{...e,tempCandidateNode:d}})&&await M.flipAnimation({...e,tempCandidateNode:d}),t(this,n.flipCandidateEnd,{bubbles:!0,cancelable:!1,composed:!0,detail:{...e,tempCandidateNode:d}}),d.remove()},l=async function(e,i){const r=("object"!=typeof e||e instanceof HTMLElement?i:e)??{},{mode:a=this.mode,duration:s=this.duration,direction:o=this.direction,minFlips:l=this.minFlips,maxFlips:p=this.maxFlips,perspective:c=this.perspective}=r,h={mode:a,duration:s,direction:o,minFlips:l,maxFlips:p,perspective:c},u=e===r||void 0===e?this.getNextCandidateIndex({mode:a}):e,f=this.getCandidateInfo(u),{index:v,node:g}=f;if(null===g)throw new ReferenceError(`Target candidate doesn't exist: ${u}`);const y=this.getCandidateInfo(this.index);if(!t(this,n.flipStart,{bubbles:!0,cancelable:!0,composed:!0,detail:{...h,lastCandidateInfo:y,targetCandidateInfo:f}}))return;const m=async(t=1)=>{const e=t<p?this.getNextCandidateIndex({mode:a}):v,n=this.getCandidateInfo(e),i=this.getCandidateInfo(this.index);await d.call(this,{...h,lastCandidateInfo:i,nextCandidateInfo:n}),e!==v&&await m(t+1)};await m(),t(this,n.flipEnd,{bubbles:!0,cancelable:!1,composed:!0,detail:{...h,lastCandidateInfo:y,targetCandidateInfo:f}})};var p;!function(t){t.up="up",t.down="down",t.left="left",t.right="right"}(p||(p={}));const c=p,h=function t(e){const n=e.cloneNode(!1);if(e instanceof HTMLCanvasElement){const t=n;t.width=e.width,t.height=e.height,t.getContext("2d")?.drawImage?.(e,0,0)}return e.childNodes.forEach((e=>{n.appendChild(t(e))})),n},u=function(t,e){const n=/^@/.test(t)?"@-":"-",i=t.replace(/^@/,"").replace(/;?$/,";");return(Array.isArray(e)?e:[e]).map((t=>`${n}${t}-${i}`)).concat(t).join("\n")},f=t=>`\n  ${u(`@keyframes flip {\n    0% {\n      ${u("transform: perspective(var(--hori-perspective)) rotateY(0);","webkit")}\n    }\n    100% {\n      ${u("transform: perspective(var(--hori-perspective)) rotateY(var(--end-deg));","webkit")}\n    }\n  }`,"webkit")}\n\n  :host {\n    --hori-perspective: ${t.perspective};\n    --right-x-left: 50%;\n    --right-x-right: calc(100% + 100vw);\n    --left-x-left: -100vw;\n    --left-x-right: 50%;\n    --left-end-deg: -180deg;\n    --right-end-deg: 180deg;\n\n    ${u("clip-path: polygon(\n      var(--start-x-left) -100vh,\n      var(--start-x-right) -100vh,\n      var(--start-x-right) calc(100% + 100vh),\n      var(--start-x-left) calc(100% + 100vh)\n    );","webkit")}\n    ${u("animation: flip var(--duration) forwards linear;","webkit")}\n  }\n`,v=t=>`\n  ${u(`@keyframes flip {\n    0% {\n      ${u("transform: perspective(var(--vert-perspective)) rotateX(0);","webkit")}\n    }\n    100% {\n      ${u("transform: perspective(var(--vert-perspective)) rotateX(var(--end-deg));","webkit")}\n    }\n  }`,"webkit")}\n\n  :host {\n    --vert-perspective: ${t.perspective};\n    --upper-y-top: -100vh;\n    --upper-y-bottom: 50%;\n    --lower-y-top: 50%;\n    --lower-y-bottom: calc(100% + 100vh);\n    --down-end-deg: -180deg;\n    --up-end-deg: 180deg;\n\n    ${u("clip-path: polygon(\n      -100vw var(--start-y-top),\n      calc(100% + 100vw) var(--start-y-top),\n      calc(100% + 100vw) var(--start-y-bottom),\n      -100vw var(--start-y-bottom)\n    );","webkit")}\n    ${u("animation: flip var(--duration) forwards linear;","webkit")}\n  }\n`,g=async function(t){const{direction:e}=t;switch(e){default:throw new TypeError(`Invalid direction: ${e}`);case c.up:case c.down:return function(t){const{duration:e,direction:n,lastCandidateInfo:r,nextCandidateInfo:a,tempCandidateNode:s}=t,{node:o}=r,d=a.node,l=e/1e3,p=i({style:v(t)}),f=i({style:`\n  ${u("@keyframes clip-next {\n    0% { opacity: 0 }\n    50%, 100% { opacity: 1 }\n  }","webkit")}\n\n  :host {\n    ${u("transform: rotateX(180deg);","webkit")}\n    ${u("animation: clip-next var(--duration) forwards steps(1, end);","webkit")}\n  }\n`}),g=h(d);switch(n){default:case c.down:p.style.setProperty("--start-y-top","var(--upper-y-top)"),p.style.setProperty("--start-y-bottom","var(--upper-y-bottom)"),p.style.setProperty("--end-y-top","var(--lower-y-top)"),p.style.setProperty("--end-y-bottom","var(--lower-y-bottom)"),p.style.setProperty("--end-deg","var(--down-end-deg)");break;case c.up:p.style.setProperty("--start-y-top","var(--lower-y-top)"),p.style.setProperty("--start-y-bottom","var(--lower-y-bottom)"),p.style.setProperty("--end-y-top","var(--upper-y-top)"),p.style.setProperty("--end-y-bottom","var(--upper-y-bottom)"),p.style.setProperty("--end-deg","var(--up-end-deg)")}if(p.style.setProperty("--duration",`${l}s`),g.removeAttribute("slot"),f.append(g),p.append(f),o){const t=i({style:`\n  :host {\n    --upper-y-top: -100vh;\n    --upper-y-bottom: 50%;\n    --lower-y-top: 50%;\n    --lower-y-bottom: calc(100% + 100vh);\n\n    ${u("clip-path: polygon(\n      -100vw var(--y-top),\n      calc(100% + 100vw) var(--y-top),\n      calc(100% + 100vw) var(--y-bottom),\n      -100vw var(--y-bottom)\n    );","webkit")}\n  }\n`}),e=i({style:`\n  ${u("@keyframes clip-last {\n    0% { opacity: 1 }\n    50%, 100% { opacity: 0 }\n  }","webkit")}\n\n  :host {\n    ${u("animation: clip-last var(--duration) forwards steps(1, end);","webkit")}\n  }\n`}),r=h(o),a=h(o);switch(n){default:case c.down:t.style.setProperty("--y-top","var(--lower-y-top)"),t.style.setProperty("--y-bottom","var(--lower-y-bottom)");break;case c.up:t.style.setProperty("--y-top","var(--upper-y-top)"),t.style.setProperty("--y-bottom","var(--upper-y-bottom)")}r.removeAttribute("slot"),e.append(r),p.append(e),a.removeAttribute("slot"),t.append(a),s.append(t)}return new Promise((t=>{s.addEventListener("animationend",(()=>{t(void 0)}),{once:!0}),s.append(p)}))}(t);case c.right:case c.left:return function(t){const{duration:e,direction:n,lastCandidateInfo:r,nextCandidateInfo:a,tempCandidateNode:s}=t,{node:o}=r,d=a.node,l=e/1e3,p=i({style:f(t)}),v=i({style:`\n  ${u("@keyframes clip-next {\n    0% { opacity: 0 }\n    50%, 100% { opacity: 1 }\n  }","webkit")}\n\n  :host {\n    ${u("transform: rotateY(180deg);","webkit")}\n    ${u("animation: clip-next var(--duration) forwards steps(1, end);","webkit")}\n  }\n`}),g=h(d);switch(n){default:case c.left:p.style.setProperty("--start-x-left","var(--right-x-left)"),p.style.setProperty("--start-x-right","var(--right-x-right)"),p.style.setProperty("--end-x-left","var(--left-x-left)"),p.style.setProperty("--end-x-right","var(--left-x-right)"),p.style.setProperty("--end-deg","var(--left-end-deg)");break;case c.right:p.style.setProperty("--start-x-left","var(--left-x-left)"),p.style.setProperty("--start-x-right","var(--left-x-right)"),p.style.setProperty("--end-x-left","var(--right-x-left)"),p.style.setProperty("--end-x-right","var(--right-x-right)"),p.style.setProperty("--end-deg","var(--right-end-deg)")}if(p.style.setProperty("--duration",`${l}s`),g.removeAttribute("slot"),v.append(g),p.append(v),o){const t=i({style:`\n  :host {\n    --right-x-left: 50%;\n    --right-x-right: 100vw;\n    --left-x-left: -100vw;\n    --left-x-right: 50%;\n\n    ${u("clip-path: polygon(\n      var(--x-left) -100vh,\n      var(--x-right) -100vh,\n      var(--x-right) calc(100% + 100vh),\n      var(--x-left) calc(100% + 100vh)\n    );","webkit")}\n  }\n`}),e=i({style:`\n  ${u("@keyframes clip-last {\n    0% { opacity: 1 }\n    50%, 100% { opacity: 0 }\n  }","webkit")}\n\n  :host {\n    ${u("animation: clip-last var(--duration) forwards steps(1, end);","webkit")}\n  }\n`}),r=h(o),a=h(o);switch(n){default:case c.left:t.style.setProperty("--x-left","var(--left-x-left)"),t.style.setProperty("--x-right","var(--left-x-right)");break;case c.right:t.style.setProperty("--x-left","var(--right-x-left)"),t.style.setProperty("--x-right","var(--right-x-right)")}r.removeAttribute("slot"),e.append(r),p.append(e),a.removeAttribute("slot"),t.append(a),s.append(t)}return new Promise((t=>{s.addEventListener("animationend",(()=>{t(void 0)}),{once:!0}),s.append(p)}))}(t)}},y=function(t){if(null===t)return-1;const{candidatesCatch:e}=this;return t instanceof HTMLElement?e.indexOf(t):e.findIndex((e=>M.getCandidateValue(e)===t))},m=function(t){if(null===t)return{node:null,index:-1,value:null};if(t instanceof HTMLElement){const e=this.getCandidateIndex(t),n=-1===e?null:t;return{node:n,index:e,value:M.getCandidateValue(n)}}if("string"==typeof t){const e=this.getCandidateIndex(t),n=-1===e?null:this.getCandidateNode(e);return{node:n,index:e,value:M.getCandidateValue(n)}}const e=this.getCandidateNode(t);return{node:e,index:null===e?-1:t,value:M.getCandidateValue(e)}},x=function(t){return null===t?null:"string"==typeof t?this.candidatesCatch.find((e=>M.getCandidateValue(e)===t))??null:this.candidatesCatch[t]??null},b=function(t){return null===t?null:t instanceof HTMLElement?M.getCandidateValue(t):M.getCandidateValue(this.candidatesCatch[t])};var w;!function(t){t.loop="loop",t.random="random"}(w||(w={}));const C=w,$=function(t={}){const{mode:e=this.mode}=t,{index:n,candidatesCatch:i}=this,{length:r}=i;switch(e){default:throw new TypeError(`Invalid mode: ${e}`);case C.loop:return r>0?(n+1)%r:-1;case C.random:switch(r){case 0:return-1;case 1:return this.index;default:{let t=n;for(;t===n;)t=Math.floor(r*Math.random());return t}}}};var E;!function(t){t.index="index",t.value="value",t.mode="mode",t.duration="duration",t.direction="direction",t.minFlips="min-flips",t.maxFlips="max-flips",t.perspective="perspective"}(E||(E={}));const I=E,{isNaN:A}=globalThis,k=document.createElement("template"),N={[I.mode]:C.loop,[I.duration]:400,[I.direction]:c.down,[I.index]:-1,[I.minFlips]:0,[I.maxFlips]:1/0};k.innerHTML=`\n  <style>\n    :host {\n      position: relative;\n      display: inline-block;\n    }\n\n    slot {\n      position: relative;\n      z-index: 0;\n    }\n\n    slot:not([name]) {\n      display: none;\n    }\n  </style>\n  <flip>\n    <slot></slot>\n    <slot name="${o.current}"></slot>\n    <slot name="${o.temp}"></slot>\n  </flip>\n`;class P extends HTMLElement{candidatesCatch=[];constructor(){super();const t=this.attachShadow({mode:"open"});t.append(k.content.cloneNode(!0)),this.rootElement=t.querySelector("flip"),t.querySelector("slot:not([name])").addEventListener("slotchange",(()=>{this.candidatesCatch=Array.from(this.querySelectorAll(":scope > :not([slot=temp])"));const{candidatesCatch:t}=this;if(-1===this.index&&this.hasAttribute(I.value)&&(this.value=this.getAttribute(I.value)),this.index>=t.length||this.index<0){const e=t.length>0?0:-1;this.index=e}}))}static get DIRECTION(){return{...c}}static get MODE(){return{...C}}static get EVENT(){return{...n}}static get observedAttributes(){return[I.index,I.value]}attributeChangedCallback(t){switch(t){default:break;case I.index:this.hasAttribute(I.index)&&(this.index=Number(this.getAttribute(I.index)));break;case I.value:this.hasAttribute(I.value)&&(this.value=this.getAttribute(I.value))}}static getCandidateValue(t){return t?.getAttribute?.(I.value)??null}static flipAnimation=g;get candidates(){return[...this.candidatesCatch]}get mode(){const t=this.getAttribute(I.mode);return null!==t&&Object.values(C).includes(t)?t:N[I.mode]}set mode(t){if(!Object.values(C).includes(t))throw new TypeError(`Invalid mode: ${t}`);this.setAttribute(I.mode,t)}get duration(){const t=this.getAttribute(I.duration);return null===t||0===t.length?N[I.duration]:Number(t)}set duration(t){if(A(t))throw new TypeError(`Invalid duration: ${t}`);if(t<0)throw new RangeError(`Duration should not be lesser than 0: ${t}`);this.setAttribute(I.duration,`${t}`)}get direction(){const t=this.getAttribute(I.direction);return Object.values(c).includes(t)?t:N[I.direction]}set direction(t){if(!Object.values(c).includes(t))throw new TypeError(`Invalid direction: ${t}`);this.setAttribute(I.direction,t)}get minFlips(){const t=this.getAttribute(I.minFlips);return null===t||0===t.length?N[I.minFlips]:Number(t)}set minFlips(t){if(A(t))throw new TypeError(`Invalid min flips: ${t}`);if(parseInt(`${t}`,10)!==t)throw new TypeError(`Min flips should be an integer: ${t}`);if(t<0)throw new RangeError(`Min flips should not be lesser than 0: ${t}`);if(this.setAttribute(I.minFlips,`${t}`),this.maxFlips<t)throw new RangeError("Setting min flips that is greater than max flips might cause flipping error")}get maxFlips(){const t=this.getAttribute(I.maxFlips);return null===t||0===t.length?N[I.maxFlips]:Number(t)}set maxFlips(t){if(A(t))throw new TypeError(`Invalid max flips: ${t}`);if(parseInt(`${t}`,10)!==t)throw new TypeError(`Max flips should be an integer: ${t}`);if(t<0)throw new RangeError(`Max flips should not be lesser than 0: ${t}`);if(this.setAttribute(I.maxFlips,`${t}`),this.minFlips>t)throw new RangeError("Setting max flips that is less than min flips might cause flipping error")}get perspective(){const t=this.getAttribute(I.perspective);if(null!==t)return t;const{clientWidth:e,clientHeight:n}=this;return 2*Math.max(e,n)+"px"}set perspective(t){"string"==typeof t&&t.length>0&&this.setAttribute(I.perspective,t)}get index(){const t=this.getAttribute(I.index);return null===t||0===t.length?N[I.index]:Number(t)%this.candidates.length}set index(t){if(A(t))throw new TypeError(`Invalid index: ${t}`);if(parseInt(`${t}`,10)!==t)throw new TypeError(`Index should be an integer: ${t}`);const{candidatesCatch:e}=this,n=this.getCandidateInfo(t),{index:i,value:r,node:a}=n;if(null===a&&e.length>0)throw new Error(`Illegal index: ${t}`);this.querySelectorAll(`[slot="${o.current}"]`).forEach((t=>{t.removeAttribute("slot")})),a?.setAttribute?.("slot",o.current),i!==this.index&&(this.setAttribute(I.index,`${i}`),r?this.setAttribute(I.value,r):this.removeAttribute(I.value))}get value(){return this.getCandidateValue(this.index)}set value(t){if(null!==t&&"string"!=typeof t)throw new TypeError(`Invalid value: ${t}`);this.index=this.getCandidateIndex(t)}get candidate(){return this.getCandidateNode(this.index)}set candidate(t){this.index=this.getCandidateIndex(t)}getCandidateNode=x;getCandidateIndex=y;getCandidateValue=b;getCandidateInfo=m;getNextCandidateIndex=$;getNextCandidateNode(...t){const e=this.getNextCandidateIndex(...t);return this.getCandidateNode(e)}getNextCandidateValue(...t){const e=this.getNextCandidateIndex(...t);return this.getCandidateValue(e)}getNextCandidateInfo(...t){const e=this.getNextCandidateIndex(...t);return this.getCandidateInfo(e)}flip(...t){return l.call(this,...t)}}var T,F;T=P,F="flip-pack",customElements.get(F)?Promise.reject(new Error(`Already defined <${F}>`)):(customElements.define(F,T),customElements.whenDefined(F));const M=P})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,