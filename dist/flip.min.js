(()=>{"use strict";function t(t,e,n){return t.dispatchEvent(new CustomEvent(e,n))}var e;!function(t){t.flipStart="flipstart",t.flipCandidateStart="flipcandidatestart",t.flipCandidateEnd="flipcandidateend",t.flipEnd="flipend"}(e||(e={}));const n=e,i=function(t={}){const{className:e,slot:n,style:i="",attributes:r={},innerHTML:a="<slot></slot>"}=t,o=document.createElement("div");return o.attachShadow({mode:"open"}).innerHTML=`\n    <style>\n      \n  :host {\n    position: absolute;\n    top: 0;\n    right: 0;\n    bottom: 0;\n    left: 0;\n    pointer-events: none;\n    display: block;\n  }\n\n  slot {\n    display: block;\n  }\n\n      ${i}\n    </style>\n    ${a}\n  `,void 0!==e&&o.classList.add(e),void 0!==n&&o.setAttribute("slot",n),Object.keys(r).forEach((t=>{o.setAttribute(t,r[t])})),o};var r;!function(t){t.temp="temp"}(r||(r={}));const a=r;var o;!function(t){t.current="current",t.temp="temp"}(o||(o={}));const s=o,d=async function(e){const{nextCandidateInfo:r}=e,{index:o}=r,d=i({className:a.temp,slot:s.temp}),l=this.querySelector(`.${a.temp}`);l&&l.remove(),this.index=o,this.append(d),t(this,n.flipCandidateStart,{bubbles:!0,cancelable:!0,composed:!0,detail:{...e,tempCandidateNode:d}})&&await this.flipAnimation({...e,tempCandidateNode:d}),t(this,n.flipCandidateEnd,{bubbles:!0,cancelable:!1,composed:!0,detail:{...e,tempCandidateNode:d}}),d.remove()},l=async function(e,i){const r=("object"!=typeof e||e instanceof HTMLElement?i:e)??{},{mode:a=this.mode,direct:o=!1,different:s=this.candidatesCatch.length>1,duration:l=this.duration,direction:p=this.direction}=r,c=e===r||void 0===e?this.getNextCandidateIndex({different:s,mode:a}):e,h=this.getCandidateInfo(c),{index:u,node:f}=h;if(null===f)throw new ReferenceError(`Target candidate doesn't exist: ${c}`);const v=this.getCandidateInfo(this.index);if(t(this,n.flipStart,{bubbles:!0,cancelable:!0,composed:!0,detail:{mode:a,direct:o,different:s,duration:l,direction:p,lastCandidateInfo:v,targetCandidateInfo:h}})){if(o)await d.call(this,{mode:a,direct:o,different:s,duration:l,direction:p,lastCandidateInfo:v,nextCandidateInfo:h});else{const{minFlips:t,maxFlips:e}=this,n=async(i=1)=>{const r=i<e?this.getNextCandidateIndex({mode:a,different:i<t}):u,c=this.getCandidateInfo(r),h=this.getCandidateInfo(this.index);await d.call(this,{mode:a,direct:o,different:s,duration:l,direction:p,lastCandidateInfo:h,nextCandidateInfo:c}),r!==u&&await n(i+1)};await n()}t(this,n.flipEnd,{bubbles:!0,cancelable:!1,composed:!0,detail:{mode:a,direct:o,different:s,duration:l,direction:p,lastCandidateInfo:v,targetCandidateInfo:h}})}};var p;!function(t){t.up="up",t.down="down",t.left="left",t.right="right"}(p||(p={}));const c=p,h=function t(e){const n=e.cloneNode(!1);if(e instanceof HTMLCanvasElement){const t=n;t.width=e.width,t.height=e.height,t.getContext("2d")?.drawImage?.(e,0,0)}return e.childNodes.forEach((e=>{n.appendChild(t(e))})),n},u=function(t,e){const n=/^@/.test(t)?"@-":"-",i=t.replace(/^@/,"").replace(/;?$/,";");return(Array.isArray(e)?e:[e]).map((t=>`${n}${t}-${i}`)).concat(t).join("\n")},f=function(t){const{duration:e,direction:n,lastCandidateInfo:r,nextCandidateInfo:a,tempCandidateNode:o}=t,{node:s}=r,d=a.node,l=e/1e3,p=i({style:(g=this,`\n  ${u(`@keyframes flip {\n    0% {\n      ${u("transform: perspective(var(--hori-perspective)) rotateY(0);","webkit")}\n    }\n    100% {\n      ${u("transform: perspective(var(--hori-perspective)) rotateY(var(--end-deg));","webkit")}\n    }\n  }`,"webkit")}\n\n  :host {\n    --hori-perspective: ${g.perspective};\n    --right-x-left: 50%;\n    --right-x-right: calc(100% + 100vw);\n    --left-x-left: -100vw;\n    --left-x-right: 50%;\n    --left-end-deg: -180deg;\n    --right-end-deg: 180deg;\n\n    ${u("clip-path: polygon(\n      var(--start-x-left) -100vh,\n      var(--start-x-right) -100vh,\n      var(--start-x-right) calc(100% + 100vh),\n      var(--start-x-left) calc(100% + 100vh)\n    );","webkit")}\n    ${u("animation: flip var(--duration) forwards linear;","webkit")}\n  }\n`)}),f=i({style:`\n  ${u("@keyframes clip-next {\n    0% { opacity: 0 }\n    50%, 100% { opacity: 1 }\n  }","webkit")}\n\n  :host {\n    ${u("transform: rotateY(180deg);","webkit")}\n    ${u("animation: clip-next var(--duration) forwards steps(1, end);","webkit")}\n  }\n`}),v=h(d);var g;switch(n){default:case c.left:p.style.setProperty("--start-x-left","var(--right-x-left)"),p.style.setProperty("--start-x-right","var(--right-x-right)"),p.style.setProperty("--end-x-left","var(--left-x-left)"),p.style.setProperty("--end-x-right","var(--left-x-right)"),p.style.setProperty("--end-deg","var(--left-end-deg)");break;case c.right:p.style.setProperty("--start-x-left","var(--left-x-left)"),p.style.setProperty("--start-x-right","var(--left-x-right)"),p.style.setProperty("--end-x-left","var(--right-x-left)"),p.style.setProperty("--end-x-right","var(--right-x-right)"),p.style.setProperty("--end-deg","var(--right-end-deg)")}if(p.style.setProperty("--duration",`${l}s`),v.removeAttribute("slot"),f.append(v),p.append(f),s){const t=i({style:`\n  :host {\n    --right-x-left: 50%;\n    --right-x-right: 100vw;\n    --left-x-left: -100vw;\n    --left-x-right: 50%;\n\n    ${u("clip-path: polygon(\n      var(--x-left) -100vh,\n      var(--x-right) -100vh,\n      var(--x-right) calc(100% + 100vh),\n      var(--x-left) calc(100% + 100vh)\n    );","webkit")}\n  }\n`}),e=i({style:`\n  ${u("@keyframes clip-last {\n    0% { opacity: 1 }\n    50%, 100% { opacity: 0 }\n  }","webkit")}\n\n  :host {\n    ${u("animation: clip-last var(--duration) forwards steps(1, end);","webkit")}\n  }\n`}),r=h(s),a=h(s);switch(n){default:case c.left:t.style.setProperty("--x-left","var(--left-x-left)"),t.style.setProperty("--x-right","var(--left-x-right)");break;case c.right:t.style.setProperty("--x-left","var(--right-x-left)"),t.style.setProperty("--x-right","var(--right-x-right)")}r.removeAttribute("slot"),e.append(r),p.append(e),a.removeAttribute("slot"),t.append(a),o.append(t)}return new Promise((t=>{o.addEventListener("animationend",(()=>{t(void 0)}),{once:!0}),o.append(p)}))},v=function(t){const{duration:e,direction:n,lastCandidateInfo:r,nextCandidateInfo:a,tempCandidateNode:o}=t,{node:s}=r,d=a.node,l=e/1e3,p=i({style:(g=this,`\n  ${u(`@keyframes flip {\n    0% {\n      ${u("transform: perspective(var(--vert-perspective)) rotateX(0);","webkit")}\n    }\n    100% {\n      ${u("transform: perspective(var(--vert-perspective)) rotateX(var(--end-deg));","webkit")}\n    }\n  }`,"webkit")}\n\n  :host {\n    --vert-perspective: ${g.perspective};\n    --upper-y-top: -100vh;\n    --upper-y-bottom: 50%;\n    --lower-y-top: 50%;\n    --lower-y-bottom: calc(100% + 100vh);\n    --down-end-deg: -180deg;\n    --up-end-deg: 180deg;\n\n    ${u("clip-path: polygon(\n      -100vw var(--start-y-top),\n      calc(100% + 100vw) var(--start-y-top),\n      calc(100% + 100vw) var(--start-y-bottom),\n      -100vw var(--start-y-bottom)\n    );","webkit")}\n    ${u("animation: flip var(--duration) forwards linear;","webkit")}\n  }\n`)}),f=i({style:`\n  ${u("@keyframes clip-next {\n    0% { opacity: 0 }\n    50%, 100% { opacity: 1 }\n  }","webkit")}\n\n  :host {\n    ${u("transform: rotateX(180deg);","webkit")}\n    ${u("animation: clip-next var(--duration) forwards steps(1, end);","webkit")}\n  }\n`}),v=h(d);var g;switch(n){default:case c.down:p.style.setProperty("--start-y-top","var(--upper-y-top)"),p.style.setProperty("--start-y-bottom","var(--upper-y-bottom)"),p.style.setProperty("--end-y-top","var(--lower-y-top)"),p.style.setProperty("--end-y-bottom","var(--lower-y-bottom)"),p.style.setProperty("--end-deg","var(--down-end-deg)");break;case c.up:p.style.setProperty("--start-y-top","var(--lower-y-top)"),p.style.setProperty("--start-y-bottom","var(--lower-y-bottom)"),p.style.setProperty("--end-y-top","var(--upper-y-top)"),p.style.setProperty("--end-y-bottom","var(--upper-y-bottom)"),p.style.setProperty("--end-deg","var(--up-end-deg)")}if(p.style.setProperty("--duration",`${l}s`),v.removeAttribute("slot"),f.append(v),p.append(f),s){const t=i({style:`\n  :host {\n    --upper-y-top: -100vh;\n    --upper-y-bottom: 50%;\n    --lower-y-top: 50%;\n    --lower-y-bottom: calc(100% + 100vh);\n\n    ${u("clip-path: polygon(\n      -100vw var(--y-top),\n      calc(100% + 100vw) var(--y-top),\n      calc(100% + 100vw) var(--y-bottom),\n      -100vw var(--y-bottom)\n    );","webkit")}\n  }\n`}),e=i({style:`\n  ${u("@keyframes clip-last {\n    0% { opacity: 1 }\n    50%, 100% { opacity: 0 }\n  }","webkit")}\n\n  :host {\n    ${u("animation: clip-last var(--duration) forwards steps(1, end);","webkit")}\n  }\n`}),r=h(s),a=h(s);switch(n){default:case c.down:t.style.setProperty("--y-top","var(--lower-y-top)"),t.style.setProperty("--y-bottom","var(--lower-y-bottom)");break;case c.up:t.style.setProperty("--y-top","var(--upper-y-top)"),t.style.setProperty("--y-bottom","var(--upper-y-bottom)")}r.removeAttribute("slot"),e.append(r),p.append(e),a.removeAttribute("slot"),t.append(a),o.append(t)}return new Promise((t=>{o.addEventListener("animationend",(()=>{t(void 0)}),{once:!0}),o.append(p)}))},g=async function(t){const{direction:e}=t;switch(e){default:throw new TypeError(`Invalid direction: ${e}`);case c.up:case c.down:return v.call(this,t);case c.right:case c.left:return f.call(this,t)}},y=function(t){if(null===t)return-1;const{candidatesCatch:e}=this;return t instanceof HTMLElement?e.indexOf(t):e.findIndex((e=>M.getCandidateValue(e)===t))},m=function(t){if(null===t)return{node:null,index:-1,value:null};if(t instanceof HTMLElement){const e=this.getCandidateIndex(t),n=-1===e?null:t;return{node:n,index:e,value:M.getCandidateValue(n)}}if("string"==typeof t){const e=this.getCandidateIndex(t),n=-1===e?null:this.getCandidateNode(e);return{node:n,index:e,value:M.getCandidateValue(n)}}const e=this.getCandidateNode(t);return{node:e,index:null===e?-1:t,value:M.getCandidateValue(e)}},x=function(t){return null===t?null:"string"==typeof t?this.candidatesCatch.find((e=>M.getCandidateValue(e)===t))??null:this.candidatesCatch[t]??null},b=function(t){return null===t?null:t instanceof HTMLElement?M.getCandidateValue(t):M.getCandidateValue(this.candidatesCatch[t])};var w;!function(t){t.loop="loop",t.random="random"}(w||(w={}));const C=w,$=function(t={}){const{different:e=this.candidatesCatch.length>1,mode:n=this.mode}=t,{index:i,candidatesCatch:r}=this,{length:a}=r;switch(n){default:throw new TypeError(`Invalid mode: ${n}`);case C.loop:{const t=(i+1)%a;return t===i&&e?-1:t}case C.random:switch(a){case 0:return-1;case 1:return e?-1:this.index;default:{let t=-1;for(;-1===t||t===i&&e;)t=Math.floor(a*Math.random());return t}}}};var I;!function(t){t.index="index",t.value="value",t.mode="mode",t.duration="duration",t.direction="direction",t.minFlips="min-flips",t.maxFlips="max-flips",t.perspective="perspective"}(I||(I={}));const E=I,{isNaN:A}=globalThis,k=document.createElement("template"),N={[E.mode]:C.loop,[E.duration]:400,[E.direction]:c.down,[E.index]:-1,[E.minFlips]:0,[E.maxFlips]:1/0};k.innerHTML=`\n  <style>\n    :host {\n      position: relative;\n      display: inline-block;\n    }\n\n    slot {\n      position: relative;\n      z-index: 0;\n    }\n\n    slot:not([name]) {\n      display: none;\n    }\n  </style>\n  <flip>\n    <slot></slot>\n    <slot name="${s.current}"></slot>\n    <slot name="${s.temp}"></slot>\n  </flip>\n`;class P extends HTMLElement{candidatesCatch=[];constructor(){super();const t=this.attachShadow({mode:"open"});t.append(k.content.cloneNode(!0)),this.rootElement=t.querySelector("flip"),t.querySelector("slot:not([name])").addEventListener("slotchange",(()=>{this.candidatesCatch=Array.from(this.querySelectorAll(":scope > :not([slot=temp])"));const{candidatesCatch:t}=this;if(-1===this.index&&this.hasAttribute(E.value)&&(this.value=this.getAttribute(E.value)),this.index>=t.length||this.index<0){const e=t.length>0?0:-1;this.index=e}}))}static get DIRECTION(){return{...c}}static get MODE(){return{...C}}static get EVENT(){return{...n}}static get observedAttributes(){return[E.index,E.value]}attributeChangedCallback(t){switch(t){default:break;case E.index:this.hasAttribute(E.index)&&(this.index=Number(this.getAttribute(E.index)));break;case E.value:this.hasAttribute(E.value)&&(this.value=this.getAttribute(E.value))}}static getCandidateValue(t){return t?.getAttribute?.(E.value)??null}get candidates(){return[...this.candidatesCatch]}get mode(){const t=this.getAttribute(E.mode);return null!==t&&Object.values(C).includes(t)?t:N[E.mode]}set mode(t){if(!Object.values(C).includes(t))throw new TypeError(`Invalid mode: ${t}`);this.setAttribute(E.mode,t)}get duration(){const t=this.getAttribute(E.duration);return null===t||0===t.length?N[E.duration]:Number(t)}set duration(t){if(A(t))throw new TypeError(`Invalid duration: ${t}`);if(t<0)throw new RangeError(`Duration should not be lesser than 0: ${t}`);this.setAttribute(E.duration,`${t}`)}get direction(){const t=this.getAttribute(E.direction);return Object.values(c).includes(t)?t:N[E.direction]}set direction(t){if(!Object.values(c).includes(t))throw new TypeError(`Invalid direction: ${t}`);this.setAttribute(E.direction,t)}get minFlips(){const t=this.getAttribute(E.minFlips);return null===t||0===t.length?N[E.minFlips]:Number(t)}set minFlips(t){if(A(t))throw new TypeError(`Invalid min flips: ${t}`);if(parseInt(`${t}`,10)!==t)throw new TypeError(`Min flips should be an integer: ${t}`);if(t<0)throw new RangeError(`Min flips should not be lesser than 0: ${t}`);if(this.setAttribute(E.minFlips,`${t}`),this.maxFlips<t)throw new RangeError("Setting min flips that is greater than max flips might cause flipping error")}get maxFlips(){const t=this.getAttribute(E.maxFlips);return null===t||0===t.length?N[E.maxFlips]:Number(t)}set maxFlips(t){if(A(t))throw new TypeError(`Invalid max flips: ${t}`);if(parseInt(`${t}`,10)!==t)throw new TypeError(`Max flips should be an integer: ${t}`);if(t<0)throw new RangeError(`Max flips should not be lesser than 0: ${t}`);if(this.setAttribute(E.maxFlips,`${t}`),this.minFlips>t)throw new RangeError("Setting max flips that is less than min flips might cause flipping error")}get perspective(){const t=this.getAttribute(E.perspective);if(null!==t)return t;const{clientWidth:e,clientHeight:n}=this;return 2*Math.max(e,n)+"px"}set perspective(t){"string"==typeof t&&t.length>0&&this.setAttribute(E.perspective,t)}get index(){const t=this.getAttribute(E.index);return null===t||0===t.length?N[E.index]:Number(t)%this.candidates.length}set index(t){if(A(t))throw new TypeError(`Invalid index: ${t}`);if(parseInt(`${t}`,10)!==t)throw new TypeError(`Index should be an integer: ${t}`);const{candidatesCatch:e}=this,n=this.getCandidateInfo(t),{index:i,value:r,node:a}=n;if(null===a&&e.length>0)throw new Error(`Illegal index: ${t}`);this.querySelectorAll(`[slot="${s.current}"]`).forEach((t=>{t.removeAttribute("slot")})),a?.setAttribute?.("slot",s.current),i!==this.index&&(this.setAttribute(E.index,`${i}`),r?this.setAttribute(E.value,r):this.removeAttribute(E.value))}get value(){return this.getCandidateValue(this.index)}set value(t){if(null!==t&&"string"!=typeof t)throw new TypeError(`Invalid value: ${t}`);this.index=this.getCandidateIndex(t)}get candidate(){return this.getCandidateNode(this.index)}set candidate(t){this.index=this.getCandidateIndex(t)}getCandidateNode=x;getCandidateIndex=y;getCandidateValue=b;getCandidateInfo=m;getNextCandidateIndex=$;getNextCandidateNode(...t){const e=this.getNextCandidateIndex(...t);return this.getCandidateNode(e)}getNextCandidateValue(...t){const e=this.getNextCandidateIndex(...t);return this.getCandidateValue(e)}getNextCandidateInfo(...t){const e=this.getNextCandidateIndex(...t);return this.getCandidateInfo(e)}flip(...t){return l.call(this,...t)}flipAnimation=g}var T,F;T=P,F="flip-pack",customElements.get(F)?Promise.reject(new Error(`Already defined <${F}>`)):(customElements.define(F,T),customElements.whenDefined(F));const M=P})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,